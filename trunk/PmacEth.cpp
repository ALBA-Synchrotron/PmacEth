static const char *RcsId = "$Header:  $";
//+=============================================================================
//
// file :         PmacEth.cpp
//
// description :  C++ source for the PmacEth and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                PmacEth are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:       Cristina Lazar        clazar@cells.es $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name         |  Method name
//	----------------------------------------
//  State                |  dev_state()
//  Status               |  dev_status()
//  OpenConnection       |  open_connection()
//  CloseConnection      |  close_connection()
//  AboutPmac            |  about_pmac()
//  FirmwareInfo         |  firmware_info()
//  GetIPaddr            |  get_ipaddr()
//  SetIPaddr            |  set_ipaddr()
//  JogPlus              |  jog_plus()
//  JogMinus             |  jog_minus()
//  JogStop              |  jog_stop()
//  JogToPos             |  jog_to_pos()
//  JogDistFromPos       |  jog_dist_from_pos()
//  JogDistFromCmdPos    |  jog_dist_from_cmd_pos()
//  GetFeedrateOverride  |  get_feedrate_override()
//  SetFeedrateOverride  |  set_feedrate_override()
//  ResetMotor           |  reset_motor()
//  HomeMotor            |  home_motor()
//  HomeZeroMotor        |  home_zero_motor()
//  KillMotor            |  kill_motor()
//  ClearAmplifFault     |  clear_amplif_fault()
//  GlobalReset          |  global_reset()
//  GlobalResetReinit    |  global_reset_reinit()
//  SendCtrlChar         |  send_ctrl_char()
//  GlobalStatus         |  global_status()
//  CoordSysStatus       |  coord_sys_status()
//  GetIVariable         |  get_ivariable()
//  SetIVariable         |  set_ivariable()
//  SaveIVars            |  save_ivars()
//  DownloadFile         |  download_file()
//  UploadVars           |  upload_vars()
//  UploadProg           |  upload_prog()
//  GetMotorNo           |  get_motor_no()
//  SetMotorNo           |  set_motor_no()
//  DefineCoordSys       |  define_coord_sys()
//  GetCoordSys          |  get_coord_sys()
//  OnlineCmd            |  online_cmd()
//  EnablePLC		 |  enable_plc()
//  DisablePLC		 |  disable_plc()
//  RunMotionProg	 |  run_motion_prog()
//  GetMotorPos		 |  get_motor_pos()
//
//===================================================================


#include <tango.h>
#include <PmacEth.h>
#include <PmacEthClass.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include "comm_lib/pcommx.h"

#include <iostream>
#include <fstream>
#include <vector>
#include <unistd.h>


namespace PmacEth_ns
{

//+----------------------------------------------------------------------------
//
// method : 		PmacEth::PmacEth(string &s)
// 
// description : 	constructor for simulated PmacEth
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
PmacEth::PmacEth(Tango::DeviceClass *cl,string &s)
:Tango::Device_3Impl(cl,s.c_str())
{
	init_device();
}

PmacEth::PmacEth(Tango::DeviceClass *cl,const char *s)
:Tango::Device_3Impl(cl,s)
{
	init_device();
}

PmacEth::PmacEth(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_3Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		PmacEth::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void PmacEth::delete_device()
{
	//	Delete device's allocated object
  delete attr_Position_read;
  delete attr_Velocity_read;
  delete attr_FollowErr_read;
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEth::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void PmacEth::init_device()
{
	INFO_STREAM << "PmacEth::PmacEth() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();
	attr_Position_read=new Tango::DevLong;
	attr_Velocity_read=new Tango::DevLong;
	attr_FollowErr_read=new Tango::DevLong;
	sockfd=-1;
	set_state(Tango::OFF);
}


//+----------------------------------------------------------------------------
//
// method : 		PmacEth::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void PmacEth::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("IP_address"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	PmacEthClass	*ds_class =
		(static_cast<PmacEthClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize IP_address from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  iP_address;
	else {
		//	Try to initialize IP_address from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  iP_address;
	}
	//	And try to extract IP_address value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  iP_address;



	//	End of Automatic code generation
	//------------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//
// method : 		PmacEth::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void PmacEth::always_executed_hook()
{
	
}
//+----------------------------------------------------------------------------
//
// method : 		PmacEth::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void PmacEth::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "PmacEth::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEth::read_Position
// 
// description : 	Extract real attribute values for Position acquisition result.
//
//-----------------------------------------------------------------------------
void PmacEth::read_Position(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PmacEth::read_Position(Tango::Attribute &attr) entering... "<< endl;
	char buffer[2048];

	strcpy(buffer,"P");
	if(pmac_get_response(sockfd,buffer,2048)<0)
	  Tango::Except::throw_exception("Error:read_Position","Can't read from device","Device server read attribute",Tango::ERR);
	*attr_Position_read=atoi(buffer);
	attr.set_value(attr_Position_read);
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEth::read_Velocity
// 
// description : 	Extract real attribute values for Velocity acquisition result.
//
//-----------------------------------------------------------------------------
void PmacEth::read_Velocity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PmacEth::read_Velocity(Tango::Attribute &attr) entering... "<< endl;
	char buffer[2048];

	strcpy(buffer,"V");
	if(pmac_get_response(sockfd,buffer,2048)<0)
	  Tango::Except::throw_exception("Error:read_Velocity","Can't read from device","Device server read attribute",Tango::ERR);
	*attr_Velocity_read=atoi(buffer);
	attr.set_value(attr_Velocity_read);
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEth::read_FollowErr
// 
// description : 	Extract real attribute values for FollowErr acquisition result.
//
//-----------------------------------------------------------------------------
void PmacEth::read_FollowErr(Tango::Attribute &attr)
{
	DEBUG_STREAM << "PmacEth::read_FollowErr(Tango::Attribute &attr) entering... "<< endl;
	char buffer[2048];

	strcpy(buffer,"F");
	if(pmac_get_response(sockfd,buffer,2048)<0)
	  Tango::Except::throw_exception("Error:read_FollowErr","Can't read from device","Device server read attribute",Tango::ERR);
	*attr_FollowErr_read=atoi(buffer);
	attr.set_value(attr_FollowErr_read);
}
//+------------------------------------------------------------------
/**
 *	method:	PmacEth::open_connection
 *
 *	description:	method to execute "OpenConnection"
 *	Open TCP connection with the PMAC controller card.
 *	The device property IP_address must contain the actual PMAC IP address.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::open_connection()
{
	DEBUG_STREAM << "PmacEth::open_connection(): entering... !" << endl;

	//	Add your own code to control device here
	if((sockfd=open_pmac_device(iP_address.c_str()))<0)
	  Tango::Except::throw_exception("Error:open_connection","Can't connect to device","Device server OpenConnection",Tango::ERR);
	else
	  set_state(Tango::ON);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::close_connection
 *
 *	description:	method to execute "CloseConnection"
 *	Close current TCP connection between PC & PMAC.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::close_connection()
{
	DEBUG_STREAM << "PmacEth::close_connection(): entering... !" << endl;

	//	Add your own code to control device here
	if(sockfd<0)
	  Tango::Except::throw_exception("Error:close_connection","Invalid socket","Device server CloseConnection",Tango::ERR);
	else
	  {
	    if(close_pmac_device(sockfd)==0)
	      set_state(Tango::OFF);
	  }
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::jog_plus
 *
 *	description:	method to execute "JogPlus"
 *	Jog motor indefinitely in the positive direction.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::jog_plus(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "PmacEth::jog_plus(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];

	if (argin->length() == 0)
	  strcpy(buf,"J+");
	else if (argin->length() == 1)
	  sprintf(buf,"#%dJ+",(*argin)[0]);
	else
	  Tango::Except::throw_exception("Error:jog_plus","Argin array too long","Device server JogPlus",Tango::ERR);

	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:jog_plus","Can't move motor","Device server JogPlus",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::jog_minus
 *
 *	description:	method to execute "JogMinus"
 *	Jog motor indefinitely in the negative direction.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::jog_minus(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "PmacEth::jog_minus(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];

	if (argin->length() == 0)
	  strcpy(buf,"J-");
	else if (argin->length() == 1)
	  sprintf(buf,"#%dJ-",(*argin)[0]);
	else
	  Tango::Except::throw_exception("Error:jog_minus","Argin array too long","Device server JogMinus",Tango::ERR);

	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:jog_minus","Can't move motor","Device server JogMinus",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::jog_stop
 *
 *	description:	method to execute "JogStop"
 *	Stop jogging motor.
 *	Restore position control if motor was killed.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::jog_stop(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "PmacEth::jog_stop(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	if (argin->length() == 0)
	  strcpy(buf,"J/");
	else if (argin->length() == 1)
	  sprintf(buf,"#%dJ/",(*argin)[0]);
	else
	  Tango::Except::throw_exception("Error:jog_stop","Argin array too long","Device server JogToPos",Tango::ERR);

	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:jog_stop","Can't stop motor","Device server JogStop",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::jog_to_pos
 *
 *	description:	method to execute "JogToPos"
 *	Jog motor to specified position.
 *
 * @param	argin	Position motor should move to, in encoder counts.
 *
 */
//+------------------------------------------------------------------
void PmacEth::jog_to_pos(const Tango::DevVarDoubleArray *argin)
{
	DEBUG_STREAM << "PmacEth::jog_to_pos(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	if (argin->length() == 1)
	  sprintf(buf,"J=%f",(*argin)[0]);
	else if (argin->length() == 2)
	  sprintf(buf,"#%dJ=%f",int((*argin)[0]),(*argin)[1]);
	else
	  Tango::Except::throw_exception("Error:jog_to_pos","Argin array too long","Device server JogToPos",Tango::ERR);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:jog_to_pos","Can't move motor","Device server JogToPos",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::download_file
 *
 *	description:	method to execute "DownloadFile"
 *	Download file to PMAC card.
 *
 * @param	argin	Name of the file to download to PMAC.
 *
 */
//+------------------------------------------------------------------
void PmacEth::download_file(Tango::DevString argin)
{
	DEBUG_STREAM << "PmacEth::download_file(): entering... !" << endl;

	//	Add your own code to control device here
	int fd,i;
	char buf[1024];
	struct stat statbuf;
	DEBUG_STREAM << "File name: " << argin ;
	if((fd=open((const char *)argin,O_RDONLY|O_NONBLOCK))==-1)
	  Tango::Except::throw_exception("Error:download_file","Can't open file","Device server DownloadFile",Tango::ERR);	  
	if(fstat(fd,&statbuf)<0)
	  {
	    close(fd);
	    Tango::Except::throw_exception("Error:download_file","Can't stat file","Device server DownloadFile",Tango::ERR);	  
	  }
	DEBUG_STREAM << "St_size: " << statbuf.st_size;
	for(i=0;i<statbuf.st_size;i+=1024)
	  {
	    if(read(fd,buf,1024)<0)
	      {	
		close(fd);
		Tango::Except::throw_exception("Error:download_file","Can't read file","Device server DownloadFile",Tango::ERR); 
	      }

	    DEBUG_STREAM << "Buffer: " << buf;
	    if(pmac_write_buffer(sockfd,buf,1024)<0)
	      {
		close(fd);
		Tango::Except::throw_exception("Error:download_file","Can't download file to PMAC","Device server DownloadFile",Tango::ERR);	  
	      }
	  }
	close(fd);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::upload_vars
 *
 *	description:	method to execute "UploadVars"
 *	Upload variables from PMAC.
 *
 * @param	argin	Name of the file to save variables to.
 *
 */
//+------------------------------------------------------------------
void PmacEth::upload_vars(Tango::DevString argin)
{
	DEBUG_STREAM << "PmacEth::upload_vars(): entering... !" << endl;

	//	Add your own code to control device here

}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::upload_prog
 *
 *	description:	method to execute "UploadProg"
 *	Not implemented yet.
 *
 * @param	argin	Name of the file to upload program to.
 *
 */
//+------------------------------------------------------------------
void PmacEth::upload_prog(Tango::DevString argin)
{
	DEBUG_STREAM << "PmacEth::upload_prog(): entering... !" << endl;

	//	Add your own code to control device here
        
	char buf[1024], buf_out[1024];
	const char * file_name = (const char *)argin; 
	filebuf fb;
  	if (!fb.open (file_name, ios::in))
	  Tango::Except::throw_exception("Error:upload_prog","Can't open a file", "Device server UploadProg",Tango::ERR);
  	istream is(&fb);
	while(!is.getline(buf, 1024).eof())
	{
	  if (int(buf[0]) != 59 and int(buf[0]) != 13)
	  {
            unsigned int i = 0;
            do i++; while(i < 1024 and int(buf[i]) != 59);
	    if (i < 1023)
            {
              strncpy(buf_out,buf,i);
	      if(pmac_send_line(sockfd, buf_out) < 0)
                DEBUG_STREAM << "SENDING FAILED" << endl;
              DEBUG_STREAM << "Sent line: " << buf_out << endl;
	      for (int k = 0; k < 20; k++)
                DEBUG_STREAM << "char: " << int(buf_out[k]) << endl;   
            }
            else
            {
              if(pmac_send_line(sockfd, buf)<0)
                DEBUG_STREAM << "SENDING FAILED" << endl;
	      DEBUG_STREAM << "Sent line: " << buf << endl;
		for (int k = 0; k < 20; k++)
                DEBUG_STREAM << "char: " << int(buf[k]) << endl;   
            }
	  }
	  for (unsigned int j = 0; j < 1024; j++)
	    buf[j] = buf_out[j] = char(NULL);
	}
	fb.close();
  	
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::reset_motor
 *
 *	description:	method to execute "ResetMotor"
 *	Reset feedback device(s) and phasing.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::reset_motor(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "PmacEth::reset_motor(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	if (argin->length() == 0)
	  strcpy(buf,"$");
	else if (argin->length() == 1)
	  sprintf(buf,"#%d$",(*argin)[0]);
	else
	  Tango::Except::throw_exception("Error:reset_motor","Argin array too long","Device server ResetMotor",Tango::ERR);
	
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:reset_motor","Can't reset motor","Device server ResetMotor",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::home_motor
 *
 *	description:	method to execute "HomeMotor"
 *	Perform homing routine for current motor.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::home_motor(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "PmacEth::home_motor(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	if (argin->length() == 0)
	  strcpy(buf,"HM");
	else if (argin->length() == 1)
	  sprintf(buf,"#%dHM",(*argin)[0]);
	else
	  Tango::Except::throw_exception("Error:home_motor","Argin array too long","Device server HomeMotor",Tango::ERR);

	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:home_motor","Can't home motor","Device server HomeMotor",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::home_zero_motor
 *
 *	description:	method to execute "HomeZeroMotor"
 *	Perform zero-move routine for current motor.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::home_zero_motor(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "PmacEth::home_zero_motor(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];

	if (argin->length() == 0)
	  strcpy(buf,"HMZ");
	else if (argin->length() == 1)
	  sprintf(buf,"#%dHMZ",(*argin)[0]);
	else
	  Tango::Except::throw_exception("Error:home_zero_motor","Argin array too long","Device server HomeZeroMotor",Tango::ERR);

	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:home_zero_motor","Can't home motor","Device server HomeZeroMotor",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::kill_motor
 *
 *	description:	method to execute "KillMotor"
 *	Kill output for current motor.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::kill_motor(const Tango::DevVarShortArray *argin)
{
	DEBUG_STREAM << "PmacEth::kill_motor(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	if (argin->length() == 0)
	  strcpy(buf,"K");
	else if (argin->length() == 1)
	  sprintf(buf,"#%dK",(*argin)[0]);
	else
	  Tango::Except::throw_exception("Error:kill_motor","Argin array too long","Device server KillMotor",Tango::ERR);

	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:kill_motor","Can't kill motor","Device server KillMotor",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::about_pmac
 *
 *	description:	method to execute "AboutPmac"
 *	Display information about PMAC controller card.
 *
 * @return	
 *
 */
//+------------------------------------------------------------------
Tango::DevString PmacEth::about_pmac()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[256];
	//strcpy(argout, "dummy");
	DEBUG_STREAM << "PmacEth::about_pmac(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[256];

	strcpy(buf,"TYPE");
	if(pmac_get_response(sockfd,buf,256)<0)
	  strcpy(argout,"error");
	else
	  strcpy(argout,buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::firmware_info
 *
 *	description:	method to execute "FirmwareInfo"
 *	Display information about PMAC firmware in  use.
 *
 * @return	
 *
 */
//+------------------------------------------------------------------
Tango::DevString PmacEth::firmware_info()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[256];
	//strcpy(argout, "dummy");
	DEBUG_STREAM << "PmacEth::firmware_info(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[256];
	int prev_len,i;

	strcpy(buf,"VERSION");
	if((i=pmac_get_response(sockfd,buf,256))<0)
	  strcpy(argout,"error");
	else
	  {
	    memcpy(argout,buf,i-2);
	    argout[i-2]=0x20;
	    argout[i-1]=0x00;
	    prev_len=i-1;
	    strcpy(buf,"DATE");
	    if((i=pmac_get_response(sockfd,buf,256))<0)
	      {	      
		strcpy(buf,"fw date error");
		i=13;
	      }
	    memcpy(argout+prev_len,buf,i-2);
	    argout[prev_len+i-2]=0x20;
	    argout[prev_len+i-1]=0x00;
	    prev_len+=i-1;
	    strcpy(buf,"CHECKSUM");
	    if((i=pmac_get_response(sockfd,buf,256))<0)
	      {	      
		strcpy(buf,"fw cksum error");
		i=14;
	      }
	    memcpy(argout+prev_len,buf,i);
	    argout[prev_len+i]=0x00;
	  }
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::jog_dist_from_pos
 *
 *	description:	method to execute "JogDistFromPos"
 *	Jog motor specified distance from the current actual position.
 *
 * @param	argin	Distance from current actual position, in encoder counts.
 *
 */
//+------------------------------------------------------------------
void PmacEth::jog_dist_from_pos(Tango::DevLong argin)
{
	DEBUG_STREAM << "PmacEth::jog_dist_from_pos(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"J^%d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:jog_dist_from_pos","Can't move motor","Device server JogDistFromPos",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::jog_dist_from_cmd_pos
 *
 *	description:	method to execute "JogDistFromCmdPos"
 *	Jog motor specified distance from the current commanded position.
 *
 * @param	argin	Distance from current commanded position, in encoder counts.
 *
 */
//+------------------------------------------------------------------
void PmacEth::jog_dist_from_cmd_pos(Tango::DevLong argin)
{
	DEBUG_STREAM << "PmacEth::jog_dist_from_cmd_pos(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];

	sprintf(buf,"J:%d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:jog_dist_from_cmd_pos","Can't move motor","Device server JogDistFromCmdPos",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::get_feedrate_override
 *
 *	description:	method to execute "GetFeedrateOverride"
 *	Report current feedrate override value.
 *
 * @return	Feedrate override in percents.
 *
 */
//+------------------------------------------------------------------
Tango::DevDouble PmacEth::get_feedrate_override()
{
	Tango::DevDouble	argout ;
	DEBUG_STREAM << "PmacEth::get_feedrate_override(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];

	strcpy(buf,"%");
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:get_feedrate_override","Can't get feedrate override","Device server GetFeedrateOverride",Tango::ERR);
	
	argout=atof(buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::set_feedrate_override
 *
 *	description:	method to execute "SetFeedrateOverride"
 *	Set feedrate override (percentage).
 *
 * @param	argin	Feedrate override in percents.
 *
 */
//+------------------------------------------------------------------
void PmacEth::set_feedrate_override(Tango::DevFloat argin)
{
	DEBUG_STREAM << "PmacEth::set_feedrate_override(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];

	sprintf(buf,"%%%f",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:set_feedrate_override","Can't set feedrate override","Device server SetFeedrateOverride",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::clear_amplif_fault
 *
 *	description:	method to execute "ClearAmplifFault"
 *	Clear Geo amplifier fault display. (Geo PMAC only)
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::clear_amplif_fault()
{
	DEBUG_STREAM << "PmacEth::clear_amplif_fault(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	strcpy(buf,"CLEARFAULT");
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:clear_amplif_fault","Can't clear amplif fault","Device server ClearAmplifFault",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::global_reset
 *
 *	description:	method to execute "GlobalReset"
 *	Global reset, including all motors & coordinate systems.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::global_reset()
{
	DEBUG_STREAM << "PmacEth::global_reset(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	strcpy(buf,"$$$");
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:global_reset","Can't reset card","Device server GlobalReset",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::global_reset_reinit
 *
 *	description:	method to execute "GlobalResetReinit"
 *	Global reset & re-initialize controller card.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::global_reset_reinit()
{
	DEBUG_STREAM << "PmacEth::global_reset_reinit(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	strcpy(buf,"$$$***");
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:global_reset_reinit","Can't reset & reinitialize card","Device server GlobalResetReinit",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::send_ctrl_char
 *
 *	description:	method to execute "SendCtrlChar"
 *	Send a control character to the PMAC card & get its response, if any.
 *
 * @param	argin	Control character to send:\n A - abort all motion programs & moves\n D - disable all PLC & PLCC programs\n K - kill outputs for all motors\n L - close rotary program buffer\n O - do feed hold on all coordinate systems\n Q - quit all programs at end of calculated moves\n R - run working programs in all coordinate systems\n S - step working programs in all coordinate systems\n U - open rotary program buffer\n B - report all motor status words to host\n C - report all coordinate system status words to host\n F - report all motor following errors (unscaled)\n G - report global status words in binary form\n P - report all motor positions (unscaled)\n V - report all motor velocities (unscaled)
 * @return	Command response from controller card, if any.
 *
 */
//+------------------------------------------------------------------
Tango::DevString PmacEth::send_ctrl_char(Tango::DevString argin)
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[256];
	DEBUG_STREAM << "PmacEth::send_ctrl_char(): entering... !" << endl;

	//	Add your own code to control device here
	char c,buf[256];

	if((argin[0]>90 && argin[0]<97)||(argin[0]>122)||(argin[0]<65))
	  {
	    strcpy(argout,"char error");
	    return argout;
	  }
	if(argin[0]>90)
	  argin[0]-=32;
	c=ctrl_char[argin[0]-65];

	if((c==0x02)||(c==0x03)||(c==0x06)||(c==0x07)||(c==0x10)||(c==0x16))
	  if(pmac_get_control_response(sockfd,c,buf,256)<0)
	    strcpy(argout,"error");
	  else
	    strcpy(argout,buf);
	else
	  if(pmac_send_control_char(sockfd,c)<0)
	    strcpy(argout,"error");
	  else
	    strcpy(argout,"success");
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::global_status
 *
 *	description:	method to execute "GlobalStatus"
 *	Report global status.
 *
 * @return	Global status words in hex ASCII form.
 *
 */
//+------------------------------------------------------------------
Tango::DevString PmacEth::global_status()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[256];
	//strcpy(argout, "dummy");
	DEBUG_STREAM << "PmacEth::global_status(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[256];
	
	strcpy(buf,"???");
	if(pmac_get_response(sockfd,buf,256)<0)
	  strcpy(argout,"error");
	else
	  strcpy(argout,buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::coord_sys_status
 *
 *	description:	method to execute "CoordSysStatus"
 *	Report current coordinate system status.
 *
 * @return	Coordinate system status in hex ASCII form.
 *
 */
//+------------------------------------------------------------------
Tango::DevString PmacEth::coord_sys_status()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[32];
	//strcpy(argout, "dummy");
	DEBUG_STREAM << "PmacEth::coord_sys_status(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[32];
	
	strcpy(buf,"??");
	if(pmac_get_response(sockfd,buf,32)<0)
	  strcpy(argout,"error");
	else
	  strcpy(argout,buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::get_ivariable
 *
 *	description:	method to execute "GetIVariable"
 *	Report the value of the I variable indicated in Command Argin.
 *
 * @param	argin	I variable number
 * @return	I variable value
 *
 */
//+------------------------------------------------------------------
Tango::DevDouble PmacEth::get_ivariable(Tango::DevULong argin)
{
	Tango::DevDouble	argout ;
	DEBUG_STREAM << "PmacEth::get_ivariable(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"I%d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:get_ivariable","Can't get I variable","Device server GetIVariable",Tango::ERR);
	else
	  argout=atof(buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::set_ivariable
 *
 *	description:	method to execute "SetIVariable"
 *	Set the I variable indicated in the first element of Command Argin to
 *	the value specified by the second element of Command Argin.
 *
 * @param	argin	I variable number, I variable value
 *
 */
//+------------------------------------------------------------------
void PmacEth::set_ivariable(const Tango::DevVarDoubleArray *argin)
{
	DEBUG_STREAM << "PmacEth::set_ivariable(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	sprintf(buf,"I%d=%f",int((*argin)[0]),(*argin)[1]);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:set_ivariable","Can't set I variable","Device server SetIVariable",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::get_mvariable
 *
 *	description:	method to execute "GetMVariable"
 *	Report the value of the M variable indicated in Command Argin.
 *
 * @param	argin	M variable number
 * @return	M variable value
 *
 */
//+------------------------------------------------------------------
Tango::DevDouble PmacEth::get_mvariable(Tango::DevULong argin)
{
	Tango::DevDouble	argout ;
	DEBUG_STREAM << "PmacEth::get_mvariable(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	sprintf(buf,"M%d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:get_mvariable","Can't get M variable","Device server GetMVariable",Tango::ERR);
	else
	  argout=atof(buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::set_mvariable
 *
 *	description:	method to execute "SetMVariable"
 *	Set the M variable indicated in the first element of Command Argin to
 *	the value specified by the second element of Command Argin.
 *
 * @param	argin	M variable number, M variable value
 *
 */
//+------------------------------------------------------------------
void PmacEth::set_mvariable(const Tango::DevVarDoubleArray *argin)
{
	DEBUG_STREAM << "PmacEth::set_mvariable(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"M%d=%f",int((*argin)[0]),(*argin)[1]);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:set_mvariable","Can't set M variable","Device server SetMVariable",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::get_pvariable
 *
 *	description:	method to execute "GetPVariable"
 *	Report the value of the P variable indicated in Command Argin.
 *
 * @param	argin	P variable number
 * @return	P variable value
 *
 */
//+------------------------------------------------------------------
Tango::DevDouble PmacEth::get_pvariable(Tango::DevULong argin)
{
	Tango::DevDouble	argout ;
	DEBUG_STREAM << "PmacEth::get_pvariable(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"P%d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:get_pvariable","Can't get P variable","Device server GetPVariable",Tango::ERR);
	else
	  argout=atof(buf);
	return argout;
}
/*
 *  method: PmacEth::get_pvariable
 *
 *  description:    method to execute "GetPVariable"
 *  Report the value of the P variable indicated in Command Argin.
 *
 * @param   argin   P variable number
 * @return  P variable value
 *
 */
//+------------------------------------------------------------------
Tango::DevVarDoubleArray*    PmacEth::get_pvariablerange(const Tango::DevVarULongArray* argin)
{
    Tango::DevVarDoubleArray*    argout ;
    DEBUG_STREAM << "PmacEth::get_pvariablerange(): entering... !" << endl;

    //  Add your own code to control device here
    if(argin->length() != 2)
      Tango::Except::throw_exception( (const char*) ("TANGO_DEVICE_ERROR"),
                                        (const char*) ("Invalid number of parameters. Expects 2: beginRange and endRange\n"),
                                        (const char*) ("PmacEth::get_pvariablerange"));

    const unsigned long begin        = (*argin)[0];
    const unsigned long end          = (*argin)[1];

    if(begin > end) 
      Tango::Except::throw_exception( (const char*) ("TANGO_DEVICE_ERROR"),
                                        (const char*) ("Wrong parameters: begin of range has to be lower than end.\n"),
                                        (const char*) ("PmacEth::get_pvariablerange"));
    if ((end - begin) > 99)
      Tango::Except::throw_exception( (const char*) ("TANGO_DEVICE_ERROR"),
                                        (const char*) ("Wrong parameters: max range is 100 variables.\n"),
                                        (const char*) ("PmacEth::get_pvariablerange"));
    char buf[1400];

    sprintf(buf,"P%d..%d",begin,end);
    int nrOfChars = pmac_get_response(sockfd,buf,1400);
    if(nrOfChars < 0)
      Tango::Except::throw_exception("Error:get_pvariable","Can't get P variables","Device server GetPVariableRange",Tango::ERR);
    else
    {
      vector<double> pvars;
      const char delim[2] = {char(13), char(6)};
      char *      save;
      char *      p;

      for (p = strtok_r(buf, delim, &save); p; p = strtok_r(NULL, delim, &save))
      {
        pvars.push_back(atof(p));
        //printf("%s\t%f\n",p, atof(p));
      }

      argout = new Tango::DevVarDoubleArray();
      argout->length(pvars.size());

      vector<double>::iterator it;
      int i;
      for (i = 0, it = pvars.begin(); it != pvars.end(); it++, i++)
        (*argout)[i] = *it;
    }
    return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::set_pvariable
 *
 *	description:	method to execute "SetPVariable"
 *	Set the P variable indicated in the first element of Command Argin to
 *	the value specified by the second element of Command Argin.
 *
 * @param	argin	P variable number, P variable value
 *
 */
//+------------------------------------------------------------------
void PmacEth::set_pvariable(const Tango::DevVarDoubleArray *argin)
{
	DEBUG_STREAM << "PmacEth::set_pvariable(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"P%d=%f",int((*argin)[0]),(*argin)[1]);
	DEBUG_STREAM << "SENDING FOLLOWING COMMAND  " << buf << endl;
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:set_pvariable","Can't set P variable","Device server SetPVariable",Tango::ERR);
}
//+------------------------------------------------------------------
/**
 *	method:	PmacEth::save_ivars
 *
 *	description:	method to execute "SaveIVars"
 *	Save I variables into non-volatile memory.
 *
 *
 */
//+------------------------------------------------------------------
void PmacEth::save_ivars()
{
	DEBUG_STREAM << "PmacEth::save_ivars(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	strcpy(buf,"SAVE");
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:save_ivars","Can't save I variables","Device server SaveIVars",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::get_motor_no
 *
 *	description:	method to execute "GetMotorNo"
 *	Get current motor number.
 *
 * @return	Current motor number.
 *
 */
//+------------------------------------------------------------------
Tango::DevShort PmacEth::get_motor_no()
{
	Tango::DevShort	argout ;
	DEBUG_STREAM << "PmacEth::get_motor_no(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	strcpy(buf,"#");
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:get_motor_no","Can't get motor number","Device server GetMotorNo",Tango::ERR);
	else
	  argout=atoi(buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::set_motor_no
 *
 *	description:	method to execute "SetMotorNo"
 *	Set current motor number.
 *
 * @param	argin	Motor number.
 *
 */
//+------------------------------------------------------------------
void PmacEth::set_motor_no(Tango::DevShort argin)
{
	DEBUG_STREAM << "PmacEth::set_motor_no(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"#%d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:set_motor_no","Can't set motor number","Device server SetMotorNo",Tango::ERR);
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::define_coord_sys
 *
 *	description:	method to execute "DefineCoordSys"
 *	Define a coordinate system for the current motor axis, specifying scale factor & offset.
 *
 * @param	argin	Scale factor, Offset
 *
 */
//+------------------------------------------------------------------
void PmacEth::define_coord_sys(const Tango::DevVarDoubleArray *argin)
{
	DEBUG_STREAM << "PmacEth::define_coord_sys(): entering... !" << endl;

	//	Add your own code to control device here
	//	char buf[16];
	
	//sprintf(buf,"#1->...",argin);
	//if(pmac_get_response(sockfd,buf,16)<0)
	//  printf("error!\n");
	//else
	//  printf("success\n");

}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::get_coord_sys
 *
 *	description:	method to execute "GetCoordSys"
 *	Report axis definition of current motor in current coordinate system.
 *
 * @return	
 *
 */
//+------------------------------------------------------------------
Tango::DevString PmacEth::get_coord_sys()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[16];
	//strcpy(argout, "dummy");
	DEBUG_STREAM << "PmacEth::get_coord_sys(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	strcpy(buf,"&");
	if(pmac_get_response(sockfd,buf,16)<0)
	  strcpy(argout,"error");
	else
	  strcpy(argout,buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::get_ipaddr
 *
 *	description:	method to execute "GetIPaddr"
 *	Get current/set PMAC IP address from controller card.
 *
 * @return	PMAC IP address read from controller card.
 *
 */
//+------------------------------------------------------------------
Tango::DevString PmacEth::get_ipaddr()
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[16];
	//strcpy(argout, "dummy");
	DEBUG_STREAM << "PmacEth::get_ipaddr(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	if(pmac_get_ip(sockfd,buf)<0)
	  strcpy(argout,"error");
	else
	  strcpy(argout,buf);
	return argout;
}

//+------------------------------------------------------------------
/**
 *	method:	PmacEth::set_ipaddr
 *
 *	description:	method to execute "SetIPaddr"
 *	dotted decimal form.
 *
 * @param	argin	PMAC IP address to set; dotted decimal form.
 *
 */
//+------------------------------------------------------------------
void PmacEth::set_ipaddr(Tango::DevString argin)
{
	DEBUG_STREAM << "PmacEth::set_ipaddr(): entering... !" << endl;

	//	Add your own code to control device here
	/* need more argin tests! */
	int i,ctr;

	if((strlen(argin)>15) || (strlen(argin)<7))
	  Tango::Except::throw_exception("Error:set_ipaddr","IP address out of bounds","Device server SetIPaddr",Tango::ERR);
	else
	  {
	    ctr=0;
	    for(i=0;i<strlen(argin);i++)
	      if(argin[i]=='.')
		ctr++;
	    if(ctr!=3)
	      Tango::Except::throw_exception("Error:set_ipaddr","bad IP address","Device server SetIPaddr",Tango::ERR);
	    else
	      if(pmac_set_ip(sockfd,argin)<0)
		Tango::Except::throw_exception("Error:set_ipaddr","Can't set IP address","Device server SetIPaddr",Tango::ERR);
	  }
}

Tango::DevString PmacEth::online_cmd(Tango::DevString argin)
{
	//	POGO has generated a method core with argout allocation.
	//	If you would like to use a static reference without copying,
	//	See "TANGO Device Server Programmer's Manual"
	//		(chapter : Writing a TANGO DS / Exchanging data)
	//------------------------------------------------------------
	Tango::DevString	argout  = new char[8192];

	DEBUG_STREAM << "PmacEth::online_cmd(): entering... !" << endl;
	int cmd_length = strlen(argin);
	char buf[8192];
	strcpy(buf,argin);
	int nrOfChar = pmac_get_response(sockfd,buf,8192);
	if(nrOfChar < 0)
	  strcpy(argout,"Error");
	else
	{
	  if (int(buf[0]) == 6)
	    strcpy(argout,"Acknowledge");
	  else
 	    strncpy(argout,buf,nrOfChar);
	}
	return argout;
}

void PmacEth::enable_plc(Tango::DevShort argin)
{
	//TODO allow to pass list of PLC
	DEBUG_STREAM << "PmacEth::enable_plc(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"ENABLE PLC %d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:enable_plc","Can't enable plc","Device server EnablePLC",Tango::ERR);
}

void PmacEth::disable_plc(Tango::DevShort argin)
{
	//TODO allow to pass list of PLC
	DEBUG_STREAM << "PmacEth::disable_plc(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"DISABLE PLC %d",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:disable_plc","Can't disable plc","Device server DisablePLC",Tango::ERR);
}

void PmacEth::run_motion_prog(Tango::DevShort argin)
{
	//TODO allow to pass list of motion programs
	DEBUG_STREAM << "PmacEth::run_motion_prog(): entering... !" << endl;

	//	Add your own code to control device here
	char buf[16];
	
	sprintf(buf,"B%dR",argin);
	if(pmac_get_response(sockfd,buf,16)<0)
	  Tango::Except::throw_exception("Error:run_motion_prog","Can't run motion program","Device server RunMotionProg",Tango::ERR);
}

Tango::DevDouble PmacEth::get_motor_pos(Tango::DevShort argin)
{
	DEBUG_STREAM << "PmacEth::get_motor_pos(): entering... !" << endl;

	//	Add your own code to control device here
	Tango::DevDouble	argout ;
	char buf[2048];

	sprintf(buf,"#%dP",argin);
	if(pmac_get_response(sockfd,buf,2048)<0)
	  Tango::Except::throw_exception("Error:get_motor_pos","Can't get motor position","Device server GetMotorPos",Tango::ERR);
	else
	  argout=atof(buf);
	return argout;
}

Tango::DevVarStringArray* PmacEth::list_plc(Tango::DevShort argin)
{
	DEBUG_STREAM << "PmacEth::list_plc(): entering... !" << endl;
	
	//	Add your own code to control device here
	Tango::DevVarStringArray	*argout = new Tango::DevVarStringArray();
	char buf[128],in_buf[128];
	vector<string> plc;
	
	sprintf(buf,"LIST PLC %d",argin);

	if(pmac_send_line(sockfd,buf)<0)
	  Tango::Except::throw_exception("Error:list_plc","Couldn't ask for listing plc","Device server ListPLC",Tango::ERR);

	while(true)
 	{
	  if (pmac_get_line(sockfd,in_buf,128)<0)
            Tango::Except::throw_exception("Error:list_plc","Couldn't read line","Device server ListPLC",Tango::ERR);
	 
	  if (int(in_buf[0]) == 6)
	    break;
 	  plc.push_back(string(in_buf));
	  for (unsigned int i = 0; i < 128; i++)
	    in_buf[i] = char(NULL);
	}
	
	argout->length(plc.size());
	for(unsigned int i = 0; i < plc.size(); i++)
	  (*argout)[i] = CORBA::string_dup(const_cast<char *>(plc[i].c_str()));

	return argout;
}


const char PmacEth::ctrl_char[26]={0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1A};

}	//	namespace
