static const char *RcsId     = "$Header:  $";
static const char *TagName   = "$Name:  $";
static const char *HttpServer= "http://www.esrf.fr/computing/cs/tango/tango_doc/ds_doc/";
//+=============================================================================
//
// file :        PmacEthClass.cpp
//
// description : C++ source for the PmacEthClass. A singleton
//               class derived from DeviceClass. It implements the
//               command list and all properties and methods required
//               by the PmacEth once per process.
//
// project :     TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Log:  $
//
// copyleft :   European Synchrotron Radiation Facility
//              BP 220, Grenoble 38043
//              FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================


#include <tango.h>

#include <PmacEth.h>
#include <PmacEthClass.h>


//+----------------------------------------------------------------------------
/**
 *	Create PmacEthClass singleton and return it in a C function for Python usage
 */
//+----------------------------------------------------------------------------
extern "C" {
#ifdef WIN32

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_PmacEth_class(const char *name) {
		return PmacEth_ns::PmacEthClass::init(name);
	}
}


namespace PmacEth_ns
{
//+----------------------------------------------------------------------------
//
// method : 		CloseConnectionCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *CloseConnectionCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "CloseConnectionCmd::execute(): arrived" << endl;

	((static_cast<PmacEth *>(device))->close_connection());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		OpenConnectionCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OpenConnectionCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "OpenConnectionCmd::execute(): arrived" << endl;

	((static_cast<PmacEth *>(device))->open_connection());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GlobalResetReinitCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GlobalResetReinitCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GlobalResetReinitCmd::execute(): arrived" << endl;

	((static_cast<PmacEth *>(device))->global_reset_reinit());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetIPaddrCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetIPaddrCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetIPaddrCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->set_ipaddr(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetIPaddrCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetIPaddrCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetIPaddrCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->get_ipaddr());
}

//+----------------------------------------------------------------------------
//
// method : 		GetCoordSysCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetCoordSysCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetCoordSysCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->get_coord_sys());
}

//+----------------------------------------------------------------------------
//
// method : 		DefineCoordSysCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DefineCoordSysCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DefineCoordSysCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleArray	*argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->define_coord_sys(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetMotorNoCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetMotorNoCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetMotorNoCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->set_motor_no(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetMotorNoCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetMotorNoCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetMotorNoCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->get_motor_no());
}

//+----------------------------------------------------------------------------
//
// method : 		UploadProgCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *UploadProgCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "UploadProgCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->upload_prog(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SaveIVarsCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SaveIVarsCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SaveIVarsCmd::execute(): arrived" << endl;

	((static_cast<PmacEth *>(device))->save_ivars());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetIVariableCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetIVariableCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetIVariableCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleArray	*argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->set_ivariable(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetIVariableCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetIVariableCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetIVariableCmd::execute(): arrived" << endl;

	Tango::DevULong	argin;
	extract(in_any, argin);

	return insert((static_cast<PmacEth *>(device))->get_ivariable(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		SetMVariableCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetMVariableCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetMVariableCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleArray	*argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->set_mvariable(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetMVariableCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetMVariableCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetMVariableCmd::execute(): arrived" << endl;

	Tango::DevULong	argin;
	extract(in_any, argin);

	return insert((static_cast<PmacEth *>(device))->get_mvariable(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		SetPVariableCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetPVariableCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetPVariableCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleArray	*argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->set_pvariable(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetPVariableCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetPVariableCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetPVariableCmd::execute(): arrived" << endl;

	Tango::DevULong	argin;
	extract(in_any, argin);

	return insert((static_cast<PmacEth *>(device))->get_pvariable(argin));
}


//+----------------------------------------------------------------------------
//
// method : 		CoordSysStatusCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *CoordSysStatusCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "CoordSysStatusCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->coord_sys_status());
}

//+----------------------------------------------------------------------------
//
// method : 		GlobalStatusCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GlobalStatusCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GlobalStatusCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->global_status());
}

//+----------------------------------------------------------------------------
//
// method : 		SendCtrlCharCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SendCtrlCharCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SendCtrlCharCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<PmacEth *>(device))->send_ctrl_char(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		GlobalResetCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GlobalResetCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GlobalResetCmd::execute(): arrived" << endl;

	((static_cast<PmacEth *>(device))->global_reset());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ClearAmplifFaultCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ClearAmplifFaultCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ClearAmplifFaultCmd::execute(): arrived" << endl;

	((static_cast<PmacEth *>(device))->clear_amplif_fault());
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		KillMotorCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *KillMotorCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "KillMotorCmd::execute(): arrived" << endl;

	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->kill_motor(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		HomeZeroMotorCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *HomeZeroMotorCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "HomeZeroMotorCmd::execute(): arrived" << endl;

	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->home_zero_motor(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		HomeMotorCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *HomeMotorCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "HomeMotorCmd::execute(): arrived" << endl;
	
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->home_motor(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		ResetMotorCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ResetMotorCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ResetMotorCmd::execute(): arrived" << endl;

	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->reset_motor(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		SetFeedrateOverrideCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *SetFeedrateOverrideCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "SetFeedrateOverrideCmd::execute(): arrived" << endl;

	Tango::DevFloat	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->set_feedrate_override(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetFeedrateOverrideCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetFeedrateOverrideCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetFeedrateOverrideCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->get_feedrate_override());
}

//+----------------------------------------------------------------------------
//
// method : 		JogDistFromCmdPosCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *JogDistFromCmdPosCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "JogDistFromCmdPosCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->jog_dist_from_cmd_pos(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		JogDistFromPosCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *JogDistFromPosCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "JogDistFromPosCmd::execute(): arrived" << endl;

	Tango::DevLong	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->jog_dist_from_pos(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		FirmwareInfoCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *FirmwareInfoCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "FirmwareInfoCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->firmware_info());
}

//+----------------------------------------------------------------------------
//
// method : 		AboutPmacCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *AboutPmacCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "AboutPmacCmd::execute(): arrived" << endl;

	return insert((static_cast<PmacEth *>(device))->about_pmac());
}

//+----------------------------------------------------------------------------
//
// method : 		JogPlusCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *JogPlusCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "JogPlusCmd::execute(): arrived" << endl;

	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->jog_plus(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		JogMinusCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *JogMinusCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "JogMinusCmd::execute(): arrived" << endl;

	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->jog_minus(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		JogStopCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *JogStopCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "JogStopCmd::execute(): arrived" << endl;
	
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->jog_stop(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		JogToPosCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *JogToPosCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "JogToPosCmd::execute(): arrived" << endl;

	const Tango::DevVarDoubleArray *argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->jog_to_pos(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		DownloadFileCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DownloadFileCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DownloadFileCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->download_file(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		UploadVarsCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *UploadVarsCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "UploadVarsCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->upload_vars(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		OnlineCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *OnlineCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "OnlineCmd::execute(): arrived" << endl;

	Tango::DevString	argin;
	extract(in_any, argin);

	return insert((static_cast<PmacEth *>(device))->online_cmd(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		EnablePLCCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *EnablePLCCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "EnablePLCCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->enable_plc(argin));
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		DisablePLCCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *DisablePLCCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "DisablePLCCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->disable_plc(argin));
	return new CORBA::Any();
}


//+----------------------------------------------------------------------------
//
// method : 		RunMotionProgCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *RunMotionProgCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "RunMotionProgCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	((static_cast<PmacEth *>(device))->run_motion_prog(argin));
	return new CORBA::Any();
}

//+----------------------------------------------------------------------------
//
// method : 		GetMotorPosCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *GetMotorPosCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "GetMotorPosCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);

	return insert((static_cast<PmacEth *>(device))->get_motor_pos(argin));
}

//+----------------------------------------------------------------------------
//
// method : 		ListPLCCmd::execute()
// 
// description : 	method to trigger the execution of the command.
//                PLEASE DO NOT MODIFY this method core without pogo   
//
// in : - device : The device on which the command must be excuted
//		- in_any : The command input data
//
// returns : The command output data (packed in the Any object)
//
//-----------------------------------------------------------------------------
CORBA::Any *ListPLCCmd::execute(Tango::DeviceImpl *device,const CORBA::Any &in_any)
{

	cout2 << "ListPLCCmd::execute(): arrived" << endl;

	Tango::DevShort	argin;
	extract(in_any, argin);
	
	return insert((static_cast<PmacEth *>(device))->list_plc(argin));
}

//
//----------------------------------------------------------------
//	Initialize pointer for singleton pattern
//----------------------------------------------------------------
//
PmacEthClass *PmacEthClass::_instance = NULL;

//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::PmacEthClass(string &s)
// 
// description : 	constructor for the PmacEthClass
//
// in : - s : The class name
//
//-----------------------------------------------------------------------------
PmacEthClass::PmacEthClass(string &s):DeviceClass(s)
{

	cout2 << "Entering PmacEthClass constructor" << endl;
	set_default_property();
	get_class_property();
	write_class_property();
	
	cout2 << "Leaving PmacEthClass constructor" << endl;

}
//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::~PmacEthClass()
// 
// description : 	destructor for the PmacEthClass
//
//-----------------------------------------------------------------------------
PmacEthClass::~PmacEthClass()
{
	_instance = NULL;
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::instance
// 
// description : 	Create the object if not already done. Otherwise, just
//			return a pointer to the object
//
// in : - name : The class name
//
//-----------------------------------------------------------------------------
PmacEthClass *PmacEthClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new PmacEthClass(s);
		}
		catch (bad_alloc)
		{
			throw;
		}		
	}		
	return _instance;
}

PmacEthClass *PmacEthClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::command_factory
// 
// description : 	Create the command object(s) and store them in the 
//			command list
//
//-----------------------------------------------------------------------------
void PmacEthClass::command_factory()
{
	command_list.push_back(new OpenConnectionCmd("OpenConnection",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new CloseConnectionCmd("CloseConnection",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new AboutPmacCmd("AboutPmac",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new FirmwareInfoCmd("FirmwareInfo",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetIPaddrCmd("GetIPaddr",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"PMAC IP address read from controller card.",
		Tango::OPERATOR));
	command_list.push_back(new SetIPaddrCmd("SetIPaddr",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"PMAC IP address to set; dotted decimal form.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new JogPlusCmd("JogPlus",
		Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
		"Nr of motor to jog plus",
		"",
		Tango::OPERATOR));
	command_list.push_back(new JogMinusCmd("JogMinus",
		Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
		"Nr of motor to jog minus",
		"",
		Tango::OPERATOR));
	command_list.push_back(new JogStopCmd("JogStop",
		Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
		"Nr of motor to jog stop",
		"",
		Tango::OPERATOR));
	command_list.push_back(new JogToPosCmd("JogToPos",
		Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
		"Position motor should move to, in encoder counts.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new JogDistFromPosCmd("JogDistFromPos",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"Distance from current actual position, in encoder counts.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new JogDistFromCmdPosCmd("JogDistFromCmdPos",
		Tango::DEV_LONG, Tango::DEV_VOID,
		"Distance from current commanded position, in encoder counts.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetFeedrateOverrideCmd("GetFeedrateOverride",
		Tango::DEV_VOID, Tango::DEV_DOUBLE,
		"",
		"Feedrate override in percents.",
		Tango::OPERATOR));
	command_list.push_back(new SetFeedrateOverrideCmd("SetFeedrateOverride",
		Tango::DEV_FLOAT, Tango::DEV_VOID,
		"Feedrate override in percents.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ResetMotorCmd("ResetMotor",
		Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
		"Nr of motor to reset",
		"",
		Tango::OPERATOR));
	command_list.push_back(new HomeMotorCmd("HomeMotor",
		Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
		"Nr of motor to home",
		"",
		Tango::OPERATOR));
	command_list.push_back(new HomeZeroMotorCmd("HomeZeroMotor",
		Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
		"Nr of motor to zero home",
		"",
		Tango::OPERATOR));
	command_list.push_back(new KillMotorCmd("KillMotor",
		Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
		"Nr of motor to kill",
		"",
		Tango::OPERATOR));
	command_list.push_back(new ClearAmplifFaultCmd("ClearAmplifFault",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GlobalResetCmd("GlobalReset",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GlobalResetReinitCmd("GlobalResetReinit",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SendCtrlCharCmd("SendCtrlChar",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"Control character to send:\n A - abort all motion programs & moves\n D - disable all PLC & PLCC programs\n K - kill outputs for all motors\n L - close rotary program buffer\n O - do feed hold on all coordinate systems\n Q - quit all programs at end of calculated moves\n R - run working programs in all coordinate systems\n S - step working programs in all coordinate systems\n U - open rotary program buffer\n B - report all motor status words to host\n C - report all coordinate system status words to host\n F - report all motor following errors (unscaled)\n G - report global status words in binary form\n P - report all motor positions (unscaled)\n V - report all motor velocities (unscaled)",
		"Command response from controller card, if any.",
		Tango::OPERATOR));
	command_list.push_back(new GlobalStatusCmd("GlobalStatus",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"Global status words in hex ASCII form.",
		Tango::OPERATOR));
	command_list.push_back(new CoordSysStatusCmd("CoordSysStatus",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"Coordinate system status in hex ASCII form.",
		Tango::OPERATOR));
	command_list.push_back(new GetIVariableCmd("GetIVariable",
		Tango::DEV_ULONG, Tango::DEV_DOUBLE,
		"I variable number",
		"I variable value",
		Tango::OPERATOR));
	command_list.push_back(new SetIVariableCmd("SetIVariable",
		Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
		"I variable number",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetMVariableCmd("GetMVariable",
		Tango::DEV_ULONG, Tango::DEV_DOUBLE,
		"M variable number",
		"M variable value",
		Tango::OPERATOR));
	command_list.push_back(new SetMVariableCmd("SetMVariable",
		Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
		"M variable number",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetPVariableCmd("GetPVariable",
		Tango::DEV_ULONG, Tango::DEV_DOUBLE,
		"P variable number",
		"P variable value",
		Tango::OPERATOR));
	command_list.push_back(new SetPVariableCmd("SetPVariable",
		Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
		"P variable number",
		"",
		Tango::OPERATOR));
	command_list.push_back(new SaveIVarsCmd("SaveIVars",
		Tango::DEV_VOID, Tango::DEV_VOID,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DownloadFileCmd("DownloadFile",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Name of the file to download to PMAC.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new UploadVarsCmd("UploadVars",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Name of the file to save variables to.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new UploadProgCmd("UploadProg",
		Tango::DEV_STRING, Tango::DEV_VOID,
		"Name of the file to upload program to.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetMotorNoCmd("GetMotorNo",
		Tango::DEV_VOID, Tango::DEV_SHORT,
		"",
		"Current motor number.",
		Tango::OPERATOR));
	command_list.push_back(new SetMotorNoCmd("SetMotorNo",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"Motor number.",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DefineCoordSysCmd("DefineCoordSys",
		Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
		"Scale factor, Offset",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetCoordSysCmd("GetCoordSys",
		Tango::DEV_VOID, Tango::DEV_STRING,
		"",
		"",
		Tango::OPERATOR));
	command_list.push_back(new OnlineCmd("OnlineCmd",
		Tango::DEV_STRING, Tango::DEV_STRING,
		"Cmd String",
		"Cmd Output",
		Tango::OPERATOR));
	command_list.push_back(new EnablePLCCmd("EnablePLC",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"PLC program nr",
		"",
		Tango::OPERATOR));
	command_list.push_back(new DisablePLCCmd("DisablePLC",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"PLC prog nr",
		"",
		Tango::OPERATOR));
	command_list.push_back(new RunMotionProgCmd("RunMotionProg",
		Tango::DEV_SHORT, Tango::DEV_VOID,
		"Motion program nr",
		"",
		Tango::OPERATOR));
	command_list.push_back(new GetMotorPosCmd("GetMotorPos",
		Tango::DEV_SHORT, Tango::DEV_DOUBLE,
		"Motor nr",
		"Motor position",
		Tango::OPERATOR));
	command_list.push_back(new ListPLCCmd("ListPLC",
		Tango::DEV_SHORT, Tango::DEVVAR_STRINGARRAY,
		"PLC nr",
		"PLC code",
		Tango::OPERATOR));
	//	add polling if any
	for (unsigned int i=0 ; i<command_list.size(); i++)
	{
	}
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::get_class_property
// 
// description : 	Get the class property for specified name.
//
// in :		string	name : The property name
//
//+----------------------------------------------------------------------------
Tango::DbDatum PmacEthClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::get_default_device_property()
// 
// description : 	Return the default value for device property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum PmacEthClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::get_default_class_property()
// 
// description : 	Return the default value for class property.
//
//-----------------------------------------------------------------------------
Tango::DbDatum PmacEthClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}
//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::device_factory
// 
// description : 	Create the device object(s) and store them in the 
//			device list
//
// in :		Tango::DevVarStringArray *devlist_ptr : The device name list
//
//-----------------------------------------------------------------------------
void PmacEthClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{

	//	Create all devices.(Automatic code generation)
	//-------------------------------------------------------------
	for (unsigned long i=0 ; i < devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
						
		// Create devices and add it into the device list
		//----------------------------------------------------
		device_list.push_back(new PmacEth(this, (*devlist_ptr)[i]));							 

		// Export device to the outside world
		// Check before if database used.
		//---------------------------------------------
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(device_list.back());
		else
			export_device(device_list.back(), (*devlist_ptr)[i]);
	}
	//	End of Automatic code generation
	//-------------------------------------------------------------

}
//+----------------------------------------------------------------------------
//	Method: PmacEthClass::attribute_factory(vector<Tango::Attr *> &att_list)
//-----------------------------------------------------------------------------
void PmacEthClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	//	Attribute : Position
	PositionAttrib	*position = new PositionAttrib();
	Tango::UserDefaultAttrProp	position_prop;
	position_prop.set_label("Motor Position");
	position_prop.set_unit("cts");
	position_prop.set_description("Current position of selected motor in encoder counts");
	position->set_default_properties(position_prop);
	att_list.push_back(position);

	//	Attribute : Velocity
	VelocityAttrib	*velocity = new VelocityAttrib();
	Tango::UserDefaultAttrProp	velocity_prop;
	velocity_prop.set_label("Motor Velocity");
	velocity_prop.set_unit("cts/sec");
	velocity_prop.set_description("Velocity of selected motor in counts/second");
	velocity->set_default_properties(velocity_prop);
	att_list.push_back(velocity);

	//	Attribute : FollowErr
	FollowErrAttrib	*follow_err = new FollowErrAttrib();
	Tango::UserDefaultAttrProp	follow_err_prop;
	follow_err_prop.set_label("Following Error");
	follow_err_prop.set_unit("cts");
	follow_err_prop.set_description("Following error of motor in encoder counts");
	follow_err->set_default_properties(follow_err_prop);
	att_list.push_back(follow_err);

	//	End of Automatic code generation
	//-------------------------------------------------------------
}

//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::get_class_property()
// 
// description : 	Read the class properties from database.
//
//-----------------------------------------------------------------------------
void PmacEthClass::get_class_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read class properties from database.(Automatic code generation)
	//------------------------------------------------------------------

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_class()->get_property(cl_prop);
	Tango::DbDatum	def_prop;
	int	i = -1;


	//	End of Automatic code generation
	//------------------------------------------------------------------

}

//+----------------------------------------------------------------------------
//
// method : 	PmacEthClass::set_default_property
// 
// description: Set default property (class and device) for wizard.
//              For each property, add to wizard property name and description
//              If default value has been set, add it to wizard property and
//              store it in a DbDatum.
//
//-----------------------------------------------------------------------------
void PmacEthClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;

	vector<string>	vect_data;
	//	Set Default Class Properties
	//	Set Default Device Properties
	prop_name = "IP_address";
	prop_desc = "IP address of PMAC controller card.";
	prop_def  = "192.6.94.5";
	vect_data.clear();
	vect_data.push_back("192.6.94.5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);

}
//+----------------------------------------------------------------------------
//
// method : 		PmacEthClass::write_class_property
// 
// description : 	Set class description as property in database
//
//-----------------------------------------------------------------------------
void PmacEthClass::write_class_property()
{
	//	First time, check if database used
	//--------------------------------------------
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("PMAC over Ethernet");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device Server for PMAC over Ethernet");
	description << str_desc;
	data.push_back(description);
		
	//	put cvs location
	string	rcsId(RcsId);
	string	filename(classname);
	start = rcsId.find("/");
	if (start!=string::npos)
	{
		filename += "Class.cpp";
		end   = rcsId.find(filename);
		if (end>start)
		{
			string	strloc = rcsId.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	//	Get CVS tag revision
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("Device_3Impl");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	//--------------------------------------------
	get_db_class()->put_property(data);
}

}	// namespace
