/*----- PROTECTED REGION ID(PmacEthClass.cpp) ENABLED START -----*/
static const char *RcsId      = "$Id:  $";
static const char *TagName    = "$Name:  $";
static const char *CvsPath    = "$Source:  $";
static const char *SvnPath    = "$HeadURL:  $";
static const char *HttpServer = "http://www.esrf.eu/computing/cs/tango/tango_doc/ds_doc/";
//=============================================================================
//
// file :        PmacEthClass.cpp
//
// description : C++ source for the PmacEthClass.
//               A singleton class derived from DeviceClass.
//               It implements the command and attribute list
//               and all properties and methods required
//               by the PmacEth once per process.
//
// project :     PMAC over Ethernet
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <tango.h>
#include <PmacEth.h>
#include <PmacEthClass.h>

/*----- PROTECTED REGION END -----*/	//	PmacEthClass.cpp

//-------------------------------------------------------------------
/**
 *	Create PmacEthClass singleton and
 *	return it in a C function for Python usage
 */
//-------------------------------------------------------------------
extern "C" {
#ifdef _TG_WINDOWS_

__declspec(dllexport)

#endif

	Tango::DeviceClass *_create_PmacEth_class(const char *name) {
		return PmacEth_ns::PmacEthClass::init(name);
	}
}

namespace PmacEth_ns
{
//===================================================================
//	Initialize pointer for singleton pattern
//===================================================================
PmacEthClass *PmacEthClass::_instance = NULL;

//--------------------------------------------------------
/**
 * method : 		PmacEthClass::PmacEthClass(string &s)
 * description : 	constructor for the PmacEthClass
 *
 * @param s	The class name
 */
//--------------------------------------------------------
PmacEthClass::PmacEthClass(string &s):Tango::DeviceClass(s)
{
	cout2 << "Entering PmacEthClass constructor" << endl;
	set_default_property();
	write_class_property();

	/*----- PROTECTED REGION ID(PmacEthClass::constructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::constructor

	cout2 << "Leaving PmacEthClass constructor" << endl;
}

//--------------------------------------------------------
/**
 * method : 		PmacEthClass::~PmacEthClass()
 * description : 	destructor for the PmacEthClass
 */
//--------------------------------------------------------
PmacEthClass::~PmacEthClass()
{
	/*----- PROTECTED REGION ID(PmacEthClass::destructor) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::destructor

	_instance = NULL;
}


//--------------------------------------------------------
/**
 * method : 		PmacEthClass::init
 * description : 	Create the object if not already done.
 *                  Otherwise, just return a pointer to the object
 *
 * @param	name	The class name
 */
//--------------------------------------------------------
PmacEthClass *PmacEthClass::init(const char *name)
{
	if (_instance == NULL)
	{
		try
		{
			string s(name);
			_instance = new PmacEthClass(s);
		}
		catch (bad_alloc &)
		{
			throw;
		}		
	}		
	return _instance;
}

//--------------------------------------------------------
/**
 * method : 		PmacEthClass::instance
 * description : 	Check if object already created,
 *                  and return a pointer to the object
 */
//--------------------------------------------------------
PmacEthClass *PmacEthClass::instance()
{
	if (_instance == NULL)
	{
		cerr << "Class is not initialised !!" << endl;
		exit(-1);
	}
	return _instance;
}



//===================================================================
//	Command execution method calls
//===================================================================
//--------------------------------------------------------
/**
 * method : 		OpenConnectionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *OpenConnectionClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "OpenConnectionClass::execute(): arrived" << endl;
	((static_cast<PmacEth *>(device))->open_connection());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		CloseConnectionClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CloseConnectionClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "CloseConnectionClass::execute(): arrived" << endl;
	((static_cast<PmacEth *>(device))->close_connection());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		AboutPmacClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *AboutPmacClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "AboutPmacClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->about_pmac());
}

//--------------------------------------------------------
/**
 * method : 		FirmwareInfoClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *FirmwareInfoClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "FirmwareInfoClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->firmware_info());
}

//--------------------------------------------------------
/**
 * method : 		GetIPaddrClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetIPaddrClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GetIPaddrClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->get_ipaddr());
}

//--------------------------------------------------------
/**
 * method : 		SetIPaddrClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetIPaddrClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetIPaddrClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->set_ipaddr(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		JogPlusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *JogPlusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "JogPlusClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->jog_plus(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		JogMinusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *JogMinusClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "JogMinusClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->jog_minus(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		JogStopClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *JogStopClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "JogStopClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->jog_stop(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		JogToPosClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *JogToPosClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "JogToPosClass::execute(): arrived" << endl;
	const Tango::DevVarDoubleArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->jog_to_pos(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		JogDistFromPosClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *JogDistFromPosClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "JogDistFromPosClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->jog_dist_from_pos(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		JogDistFromCmdPosClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *JogDistFromCmdPosClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "JogDistFromCmdPosClass::execute(): arrived" << endl;
	Tango::DevLong argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->jog_dist_from_cmd_pos(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetFeedrateOverrideClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetFeedrateOverrideClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GetFeedrateOverrideClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->get_feedrate_override());
}

//--------------------------------------------------------
/**
 * method : 		SetFeedrateOverrideClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetFeedrateOverrideClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetFeedrateOverrideClass::execute(): arrived" << endl;
	Tango::DevFloat argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->set_feedrate_override(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ResetMotorClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ResetMotorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ResetMotorClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->reset_motor(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HomeMotorClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HomeMotorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "HomeMotorClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->home_motor(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		HomeZeroMotorClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *HomeZeroMotorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "HomeZeroMotorClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->home_zero_motor(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		KillMotorClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *KillMotorClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "KillMotorClass::execute(): arrived" << endl;
	const Tango::DevVarShortArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->kill_motor(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		ClearAmplifFaultClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ClearAmplifFaultClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "ClearAmplifFaultClass::execute(): arrived" << endl;
	((static_cast<PmacEth *>(device))->clear_amplif_fault());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GlobalResetClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GlobalResetClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GlobalResetClass::execute(): arrived" << endl;
	((static_cast<PmacEth *>(device))->global_reset());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GlobalResetReinitClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GlobalResetReinitClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GlobalResetReinitClass::execute(): arrived" << endl;
	((static_cast<PmacEth *>(device))->global_reset_reinit());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SendCtrlCharClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SendCtrlCharClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SendCtrlCharClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->send_ctrl_char(argin));
}

//--------------------------------------------------------
/**
 * method : 		GlobalStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GlobalStatusClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GlobalStatusClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->global_status());
}

//--------------------------------------------------------
/**
 * method : 		CoordSysStatusClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *CoordSysStatusClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "CoordSysStatusClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->coord_sys_status());
}

//--------------------------------------------------------
/**
 * method : 		GetIVariableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetIVariableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetIVariableClass::execute(): arrived" << endl;
	Tango::DevULong argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->get_ivariable(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetIVariableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetIVariableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetIVariableClass::execute(): arrived" << endl;
	const Tango::DevVarDoubleArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->set_ivariable(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetMVariableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetMVariableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetMVariableClass::execute(): arrived" << endl;
	Tango::DevULong argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->get_mvariable(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetMVariableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetMVariableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetMVariableClass::execute(): arrived" << endl;
	const Tango::DevVarDoubleArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->set_mvariable(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetPVariableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetPVariableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetPVariableClass::execute(): arrived" << endl;
	Tango::DevULong argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->get_pvariable(argin));
}

//--------------------------------------------------------
/**
 * method : 		GetPVariableRangeClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetPVariableRangeClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetPVariableRangeClass::execute(): arrived" << endl;
	const Tango::DevVarULongArray *argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->get_pvariable_range(argin));
}

//--------------------------------------------------------
/**
 * method : 		SetPVariableClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetPVariableClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetPVariableClass::execute(): arrived" << endl;
	const Tango::DevVarDoubleArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->set_pvariable(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		SaveIVarsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SaveIVarsClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "SaveIVarsClass::execute(): arrived" << endl;
	((static_cast<PmacEth *>(device))->save_ivars());
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DownloadFileClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DownloadFileClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DownloadFileClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->download_file(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		UploadVarsClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *UploadVarsClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "UploadVarsClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->upload_vars(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		UploadProgClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *UploadProgClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "UploadProgClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->upload_prog(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetMotorNoClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetMotorNoClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GetMotorNoClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->get_motor_no());
}

//--------------------------------------------------------
/**
 * method : 		SetMotorNoClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *SetMotorNoClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "SetMotorNoClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->set_motor_no(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DefineCoordSysClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DefineCoordSysClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DefineCoordSysClass::execute(): arrived" << endl;
	const Tango::DevVarDoubleArray *argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->define_coord_sys(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetCoordSysClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetCoordSysClass::execute(Tango::DeviceImpl *device, TANGO_UNUSED(const CORBA::Any &in_any))
{
	cout2 << "GetCoordSysClass::execute(): arrived" << endl;
	return insert((static_cast<PmacEth *>(device))->get_coord_sys());
}

//--------------------------------------------------------
/**
 * method : 		OnlineCmdClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *OnlineCmdClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "OnlineCmdClass::execute(): arrived" << endl;
	Tango::DevString argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->online_cmd(argin));
}

//--------------------------------------------------------
/**
 * method : 		EnablePLCClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *EnablePLCClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "EnablePLCClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->enable_plc(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		DisablePLCClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *DisablePLCClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "DisablePLCClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->disable_plc(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		RunMotionProgClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *RunMotionProgClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "RunMotionProgClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	((static_cast<PmacEth *>(device))->run_motion_prog(argin));
	return new CORBA::Any();
}

//--------------------------------------------------------
/**
 * method : 		GetMotorPosClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *GetMotorPosClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "GetMotorPosClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->get_motor_pos(argin));
}

//--------------------------------------------------------
/**
 * method : 		ListPLCClass::execute()
 * description : 	method to trigger the execution of the command.
 *
 * @param	device	The device on which the command must be executed
 * @param	in_any	The command input data
 *
 *	returns The command output data (packed in the Any object)
 */
//--------------------------------------------------------
CORBA::Any *ListPLCClass::execute(Tango::DeviceImpl *device, const CORBA::Any &in_any)
{
	cout2 << "ListPLCClass::execute(): arrived" << endl;
	Tango::DevShort argin;
	extract(in_any, argin);
	return insert((static_cast<PmacEth *>(device))->list_plc(argin));
}


//===================================================================
//	Properties management
//===================================================================
//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::get_class_property()
 *	Description : Get the class property for specified name.
 */
//--------------------------------------------------------
Tango::DbDatum PmacEthClass::get_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_prop.size() ; i++)
		if (cl_prop[i].name == prop_name)
			return cl_prop[i];
	//	if not found, returns  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::get_default_device_property()
 *	Description : Return the default value for device property.
 */
//--------------------------------------------------------
Tango::DbDatum PmacEthClass::get_default_device_property(string &prop_name)
{
	for (unsigned int i=0 ; i<dev_def_prop.size() ; i++)
		if (dev_def_prop[i].name == prop_name)
			return dev_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}

//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::get_default_class_property()
 *	Description : Return the default value for class property.
 */
//--------------------------------------------------------
Tango::DbDatum PmacEthClass::get_default_class_property(string &prop_name)
{
	for (unsigned int i=0 ; i<cl_def_prop.size() ; i++)
		if (cl_def_prop[i].name == prop_name)
			return cl_def_prop[i];
	//	if not found, return  an empty DbDatum
	return Tango::DbDatum(prop_name);
}


//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::set_default_property()
 *	Description : Set default property (class and device) for wizard.
 *                For each property, add to wizard property name and description.
 *                If default value has been set, add it to wizard property and
 *                store it in a DbDatum.
 */
//--------------------------------------------------------
void PmacEthClass::set_default_property()
{
	string	prop_name;
	string	prop_desc;
	string	prop_def;
	vector<string>	vect_data;

	//	Set Default Class Properties

	//	Set Default device Properties
	prop_name = "IP_address";
	prop_desc = "IP address of PMAC controller card.";
	prop_def  = "192.6.94.5";
	vect_data.clear();
	vect_data.push_back("192.6.94.5");
	if (prop_def.length()>0)
	{
		Tango::DbDatum	data(prop_name);
		data << vect_data ;
		dev_def_prop.push_back(data);
		add_wiz_dev_prop(prop_name, prop_desc,  prop_def);
	}
	else
		add_wiz_dev_prop(prop_name, prop_desc);
}

//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::write_class_property()
 *	Description : Set class description fields as property in database
 */
//--------------------------------------------------------
void PmacEthClass::write_class_property()
{
	//	First time, check if database used
	if (Tango::Util::_UseDb == false)
		return;

	Tango::DbData	data;
	string	classname = get_name();
	string	header;
	string::size_type	start, end;

	//	Put title
	Tango::DbDatum	title("ProjectTitle");
	string	str_title("PMAC over Ethernet");
	title << str_title;
	data.push_back(title);

	//	Put Description
	Tango::DbDatum	description("Description");
	vector<string>	str_desc;
	str_desc.push_back("Device Server for PMAC over Ethernet");
	description << str_desc;
	data.push_back(description);

	//	put cvs or svn location
	string	filename("PmacEth");
	filename += "Class.cpp";

	// check for cvs information
	string	src_path(CvsPath);
	start = src_path.find("/");
	if (start!=string::npos)
	{
		end   = src_path.find(filename);
		if (end>start)
		{
			string	strloc = src_path.substr(start, end-start);
			//	Check if specific repository
			start = strloc.find("/cvsroot/");
			if (start!=string::npos && start>0)
			{
				string	repository = strloc.substr(0, start);
				if (repository.find("/segfs/")!=string::npos)
					strloc = "ESRF:" + strloc.substr(start, strloc.length()-start);
			}
			Tango::DbDatum	cvs_loc("cvs_location");
			cvs_loc << strloc;
			data.push_back(cvs_loc);
		}
	}

	// check for svn information
	else
	{
		string	src_path(SvnPath);
		start = src_path.find("://");
		if (start!=string::npos)
		{
			end = src_path.find(filename);
			if (end>start)
			{
				header = "$HeadURL: ";
				start = header.length();
				string	strloc = src_path.substr(start, (end-start));
				
				Tango::DbDatum	svn_loc("svn_location");
				svn_loc << strloc;
				data.push_back(svn_loc);
			}
		}
	}

	//	Get CVS or SVN revision tag
	
	// CVS tag
	string	tagname(TagName);
	header = "$Name: ";
	start = header.length();
	string	endstr(" $");
	
	end   = tagname.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strtag = tagname.substr(start, end-start);
		Tango::DbDatum	cvs_tag("cvs_tag");
		cvs_tag << strtag;
		data.push_back(cvs_tag);
	}
	
	// SVN tag
	string	svnpath(SvnPath);
	header = "$HeadURL: ";
	start = header.length();
	
	end   = svnpath.find(endstr);
	if (end!=string::npos && end>start)
	{
		string	strloc = svnpath.substr(start, end-start);
		
		string tagstr ("/tags/");
		start = strloc.find(tagstr);
		if ( start!=string::npos )
		{
			start = start + tagstr.length();
			end   = strloc.find(filename);
			string	strtag = strloc.substr(start, end-start-1);
			
			Tango::DbDatum	svn_tag("svn_tag");
			svn_tag << strtag;
			data.push_back(svn_tag);
		}
	}

	//	Get URL location
	string	httpServ(HttpServer);
	if (httpServ.length()>0)
	{
		Tango::DbDatum	db_doc_url("doc_url");
		db_doc_url << httpServ;
		data.push_back(db_doc_url);
	}

	//  Put inheritance
	Tango::DbDatum	inher_datum("InheritedFrom");
	vector<string> inheritance;
	inheritance.push_back("TANGO_BASE_CLASS");
	inher_datum << inheritance;
	data.push_back(inher_datum);

	//	Call database and and values
	get_db_class()->put_property(data);
}

//===================================================================
//	Factory methods
//===================================================================

//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::device_factory()
 *	Description : Create the device object(s)
 *                and store them in the device list
 */
//--------------------------------------------------------
void PmacEthClass::device_factory(const Tango::DevVarStringArray *devlist_ptr)
{
	/*----- PROTECTED REGION ID(PmacEthClass::device_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::device_factory_before

	//	Create devices and add it into the device list
	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{
		cout4 << "Device name : " << (*devlist_ptr)[i].in() << endl;
		device_list.push_back(new PmacEth(this, (*devlist_ptr)[i]));							 
	}

	//	Manage dynamic attributes if any
	erase_dynamic_attributes(devlist_ptr, get_class_attr()->get_attr_list());

	//	Export devices to the outside world
	for (unsigned long i=1 ; i<=devlist_ptr->length() ; i++)
	{
		//	Add dynamic attributes if any
		PmacEth *dev = static_cast<PmacEth *>(device_list[device_list.size()-i]);
		dev->add_dynamic_attributes();

		//	Check before if database used.
		if ((Tango::Util::_UseDb == true) && (Tango::Util::_FileDb == false))
			export_device(dev);
		else
			export_device(dev, dev->get_name().c_str());
	}

	/*----- PROTECTED REGION ID(PmacEthClass::device_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::device_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::attribute_factory()
 *	Description : Create the attribute object(s)
 *                and store them in the attribute list
 */
//--------------------------------------------------------
void PmacEthClass::attribute_factory(vector<Tango::Attr *> &att_list)
{
	/*----- PROTECTED REGION ID(PmacEthClass::attribute_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::attribute_factory_before
	//	Attribute : Position
	PositionAttrib	*position = new PositionAttrib();
	Tango::UserDefaultAttrProp	position_prop;
	position_prop.set_description("Current position of selected motor in encoder counts");
	position_prop.set_label("Motor Position");
	position_prop.set_unit("cts");
	//	standard_unit	not set for Position
	//	display_unit	not set for Position
	//	format	not set for Position
	//	max_value	not set for Position
	//	min_value	not set for Position
	//	max_alarm	not set for Position
	//	min_alarm	not set for Position
	//	max_warning	not set for Position
	//	min_warning	not set for Position
	//	delta_t	not set for Position
	//	delta_val	not set for Position
	
	position->set_default_properties(position_prop);
	//	Not Polled
	position->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(position);

	//	Attribute : Velocity
	VelocityAttrib	*velocity = new VelocityAttrib();
	Tango::UserDefaultAttrProp	velocity_prop;
	velocity_prop.set_description("Velocity of selected motor in counts/second");
	velocity_prop.set_label("Motor Velocity");
	velocity_prop.set_unit("cts/sec");
	//	standard_unit	not set for Velocity
	//	display_unit	not set for Velocity
	//	format	not set for Velocity
	//	max_value	not set for Velocity
	//	min_value	not set for Velocity
	//	max_alarm	not set for Velocity
	//	min_alarm	not set for Velocity
	//	max_warning	not set for Velocity
	//	min_warning	not set for Velocity
	//	delta_t	not set for Velocity
	//	delta_val	not set for Velocity
	
	velocity->set_default_properties(velocity_prop);
	//	Not Polled
	velocity->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(velocity);

	//	Attribute : FollowErr
	FollowErrAttrib	*followerr = new FollowErrAttrib();
	Tango::UserDefaultAttrProp	followerr_prop;
	followerr_prop.set_description("Following error of motor in encoder counts");
	followerr_prop.set_label("Following Error");
	followerr_prop.set_unit("cts");
	//	standard_unit	not set for FollowErr
	//	display_unit	not set for FollowErr
	//	format	not set for FollowErr
	//	max_value	not set for FollowErr
	//	min_value	not set for FollowErr
	//	max_alarm	not set for FollowErr
	//	min_alarm	not set for FollowErr
	//	max_warning	not set for FollowErr
	//	min_warning	not set for FollowErr
	//	delta_t	not set for FollowErr
	//	delta_val	not set for FollowErr
	
	followerr->set_default_properties(followerr_prop);
	//	Not Polled
	followerr->set_disp_level(Tango::OPERATOR);
	//	Not Memorized
	att_list.push_back(followerr);

	//	Create a list of static attributes
	create_static_attribute_list(get_class_attr()->get_attr_list());
	/*----- PROTECTED REGION ID(PmacEthClass::attribute_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::attribute_factory_after
}
//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::command_factory()
 *	Description : Create the command object(s)
 *                and store them in the command list
 */
//--------------------------------------------------------
void PmacEthClass::command_factory()
{
	/*----- PROTECTED REGION ID(PmacEthClass::command_factory_before) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::command_factory_before


	//	Command OpenConnection
	OpenConnectionClass	*pOpenConnectionCmd =
		new OpenConnectionClass("OpenConnection",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pOpenConnectionCmd);

	//	Command CloseConnection
	CloseConnectionClass	*pCloseConnectionCmd =
		new CloseConnectionClass("CloseConnection",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pCloseConnectionCmd);

	//	Command AboutPmac
	AboutPmacClass	*pAboutPmacCmd =
		new AboutPmacClass("AboutPmac",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pAboutPmacCmd);

	//	Command FirmwareInfo
	FirmwareInfoClass	*pFirmwareInfoCmd =
		new FirmwareInfoClass("FirmwareInfo",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pFirmwareInfoCmd);

	//	Command GetIPaddr
	GetIPaddrClass	*pGetIPaddrCmd =
		new GetIPaddrClass("GetIPaddr",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"",
			"PMAC IP address read from controller card.",
			Tango::OPERATOR);
	command_list.push_back(pGetIPaddrCmd);

	//	Command SetIPaddr
	SetIPaddrClass	*pSetIPaddrCmd =
		new SetIPaddrClass("SetIPaddr",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"PMAC IP address to set; dotted decimal form.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetIPaddrCmd);

	//	Command JogPlus
	JogPlusClass	*pJogPlusCmd =
		new JogPlusClass("JogPlus",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Nr of motor to jog plus",
			"",
			Tango::OPERATOR);
	command_list.push_back(pJogPlusCmd);

	//	Command JogMinus
	JogMinusClass	*pJogMinusCmd =
		new JogMinusClass("JogMinus",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Nr of motor to jog minus",
			"",
			Tango::OPERATOR);
	command_list.push_back(pJogMinusCmd);

	//	Command JogStop
	JogStopClass	*pJogStopCmd =
		new JogStopClass("JogStop",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Nr of motor to jog stop",
			"",
			Tango::OPERATOR);
	command_list.push_back(pJogStopCmd);

	//	Command JogToPos
	JogToPosClass	*pJogToPosCmd =
		new JogToPosClass("JogToPos",
			Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
			"Position motor should move to, in encoder counts.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pJogToPosCmd);

	//	Command JogDistFromPos
	JogDistFromPosClass	*pJogDistFromPosCmd =
		new JogDistFromPosClass("JogDistFromPos",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"Distance from current actual position, in encoder counts.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pJogDistFromPosCmd);

	//	Command JogDistFromCmdPos
	JogDistFromCmdPosClass	*pJogDistFromCmdPosCmd =
		new JogDistFromCmdPosClass("JogDistFromCmdPos",
			Tango::DEV_LONG, Tango::DEV_VOID,
			"Distance from current commanded position, in encoder counts.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pJogDistFromCmdPosCmd);

	//	Command GetFeedrateOverride
	GetFeedrateOverrideClass	*pGetFeedrateOverrideCmd =
		new GetFeedrateOverrideClass("GetFeedrateOverride",
			Tango::DEV_VOID, Tango::DEV_DOUBLE,
			"",
			"Feedrate override in percents.",
			Tango::OPERATOR);
	command_list.push_back(pGetFeedrateOverrideCmd);

	//	Command SetFeedrateOverride
	SetFeedrateOverrideClass	*pSetFeedrateOverrideCmd =
		new SetFeedrateOverrideClass("SetFeedrateOverride",
			Tango::DEV_FLOAT, Tango::DEV_VOID,
			"Feedrate override in percents.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetFeedrateOverrideCmd);

	//	Command ResetMotor
	ResetMotorClass	*pResetMotorCmd =
		new ResetMotorClass("ResetMotor",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Nr of motor to reset",
			"",
			Tango::OPERATOR);
	command_list.push_back(pResetMotorCmd);

	//	Command HomeMotor
	HomeMotorClass	*pHomeMotorCmd =
		new HomeMotorClass("HomeMotor",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Nr of motor to home",
			"",
			Tango::OPERATOR);
	command_list.push_back(pHomeMotorCmd);

	//	Command HomeZeroMotor
	HomeZeroMotorClass	*pHomeZeroMotorCmd =
		new HomeZeroMotorClass("HomeZeroMotor",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Nr of motor to zero home",
			"",
			Tango::OPERATOR);
	command_list.push_back(pHomeZeroMotorCmd);

	//	Command KillMotor
	KillMotorClass	*pKillMotorCmd =
		new KillMotorClass("KillMotor",
			Tango::DEVVAR_SHORTARRAY, Tango::DEV_VOID,
			"Nr of motor to kill",
			"",
			Tango::OPERATOR);
	command_list.push_back(pKillMotorCmd);

	//	Command ClearAmplifFault
	ClearAmplifFaultClass	*pClearAmplifFaultCmd =
		new ClearAmplifFaultClass("ClearAmplifFault",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pClearAmplifFaultCmd);

	//	Command GlobalReset
	GlobalResetClass	*pGlobalResetCmd =
		new GlobalResetClass("GlobalReset",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGlobalResetCmd);

	//	Command GlobalResetReinit
	GlobalResetReinitClass	*pGlobalResetReinitCmd =
		new GlobalResetReinitClass("GlobalResetReinit",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGlobalResetReinitCmd);

	//	Command SendCtrlChar
	SendCtrlCharClass	*pSendCtrlCharCmd =
		new SendCtrlCharClass("SendCtrlChar",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"Control character to send:\n A - abort all motion programs & moves\n D - disable all PLC & PLCC programs\n K - kill outputs for all motors\n L - close rotary program buffer\n O - do feed hold on all coordinate systems\n Q - quit all programs at end of calculated moves\n R - run working programs in all coordinate systems\n S - step working programs in all coordinate systems\n U - open rotary program buffer\n B - report all motor status words to host\n C - report all coordinate system status words to host\n F - report all motor following errors (unscaled)\n G - report global status words in binary form\n P - report all motor positions (unscaled)\n V - report all motor velocities (unscaled)",
			"Command response from controller card, if any.",
			Tango::OPERATOR);
	command_list.push_back(pSendCtrlCharCmd);

	//	Command GlobalStatus
	GlobalStatusClass	*pGlobalStatusCmd =
		new GlobalStatusClass("GlobalStatus",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"",
			"Global status words in hex ASCII form.",
			Tango::OPERATOR);
	command_list.push_back(pGlobalStatusCmd);

	//	Command CoordSysStatus
	CoordSysStatusClass	*pCoordSysStatusCmd =
		new CoordSysStatusClass("CoordSysStatus",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"",
			"Coordinate system status in hex ASCII form.",
			Tango::OPERATOR);
	command_list.push_back(pCoordSysStatusCmd);

	//	Command GetIVariable
	GetIVariableClass	*pGetIVariableCmd =
		new GetIVariableClass("GetIVariable",
			Tango::DEV_ULONG, Tango::DEV_DOUBLE,
			"I variable number",
			"I variable value",
			Tango::OPERATOR);
	command_list.push_back(pGetIVariableCmd);

	//	Command SetIVariable
	SetIVariableClass	*pSetIVariableCmd =
		new SetIVariableClass("SetIVariable",
			Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
			"I variable number",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetIVariableCmd);

	//	Command GetMVariable
	GetMVariableClass	*pGetMVariableCmd =
		new GetMVariableClass("GetMVariable",
			Tango::DEV_ULONG, Tango::DEV_DOUBLE,
			"M variable number",
			"M variable value",
			Tango::OPERATOR);
	command_list.push_back(pGetMVariableCmd);

	//	Command SetMVariable
	SetMVariableClass	*pSetMVariableCmd =
		new SetMVariableClass("SetMVariable",
			Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
			"M variable number",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetMVariableCmd);

	//	Command GetPVariable
	GetPVariableClass	*pGetPVariableCmd =
		new GetPVariableClass("GetPVariable",
			Tango::DEV_ULONG, Tango::DEV_DOUBLE,
			"P variable number",
			"P variable value",
			Tango::OPERATOR);
	command_list.push_back(pGetPVariableCmd);

	//	Command GetPVariableRange
	GetPVariableRangeClass	*pGetPVariableRangeCmd =
		new GetPVariableRangeClass("GetPVariableRange",
			Tango::DEVVAR_ULONGARRAY, Tango::DEVVAR_DOUBLEARRAY,
			"P variables range: begin and end",
			"P variables values",
			Tango::OPERATOR);
	command_list.push_back(pGetPVariableRangeCmd);

	//	Command SetPVariable
	SetPVariableClass	*pSetPVariableCmd =
		new SetPVariableClass("SetPVariable",
			Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
			"P variable number",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetPVariableCmd);

	//	Command SaveIVars
	SaveIVarsClass	*pSaveIVarsCmd =
		new SaveIVarsClass("SaveIVars",
			Tango::DEV_VOID, Tango::DEV_VOID,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSaveIVarsCmd);

	//	Command DownloadFile
	DownloadFileClass	*pDownloadFileCmd =
		new DownloadFileClass("DownloadFile",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Name of the file to download to PMAC.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDownloadFileCmd);

	//	Command UploadVars
	UploadVarsClass	*pUploadVarsCmd =
		new UploadVarsClass("UploadVars",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Name of the file to save variables to.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pUploadVarsCmd);

	//	Command UploadProg
	UploadProgClass	*pUploadProgCmd =
		new UploadProgClass("UploadProg",
			Tango::DEV_STRING, Tango::DEV_VOID,
			"Name of the file to upload program to.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pUploadProgCmd);

	//	Command GetMotorNo
	GetMotorNoClass	*pGetMotorNoCmd =
		new GetMotorNoClass("GetMotorNo",
			Tango::DEV_VOID, Tango::DEV_SHORT,
			"",
			"Current motor number.",
			Tango::OPERATOR);
	command_list.push_back(pGetMotorNoCmd);

	//	Command SetMotorNo
	SetMotorNoClass	*pSetMotorNoCmd =
		new SetMotorNoClass("SetMotorNo",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Motor number.",
			"",
			Tango::OPERATOR);
	command_list.push_back(pSetMotorNoCmd);

	//	Command DefineCoordSys
	DefineCoordSysClass	*pDefineCoordSysCmd =
		new DefineCoordSysClass("DefineCoordSys",
			Tango::DEVVAR_DOUBLEARRAY, Tango::DEV_VOID,
			"Scale factor, Offset",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDefineCoordSysCmd);

	//	Command GetCoordSys
	GetCoordSysClass	*pGetCoordSysCmd =
		new GetCoordSysClass("GetCoordSys",
			Tango::DEV_VOID, Tango::DEV_STRING,
			"",
			"",
			Tango::OPERATOR);
	command_list.push_back(pGetCoordSysCmd);

	//	Command OnlineCmd
	OnlineCmdClass	*pOnlineCmdCmd =
		new OnlineCmdClass("OnlineCmd",
			Tango::DEV_STRING, Tango::DEV_STRING,
			"Cmd String",
			"Cmd Output",
			Tango::OPERATOR);
	command_list.push_back(pOnlineCmdCmd);

	//	Command EnablePLC
	EnablePLCClass	*pEnablePLCCmd =
		new EnablePLCClass("EnablePLC",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"PLC program nr",
			"",
			Tango::OPERATOR);
	command_list.push_back(pEnablePLCCmd);

	//	Command DisablePLC
	DisablePLCClass	*pDisablePLCCmd =
		new DisablePLCClass("DisablePLC",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"PLC prog nr",
			"",
			Tango::OPERATOR);
	command_list.push_back(pDisablePLCCmd);

	//	Command RunMotionProg
	RunMotionProgClass	*pRunMotionProgCmd =
		new RunMotionProgClass("RunMotionProg",
			Tango::DEV_SHORT, Tango::DEV_VOID,
			"Motion program nr",
			"",
			Tango::OPERATOR);
	command_list.push_back(pRunMotionProgCmd);

	//	Command GetMotorPos
	GetMotorPosClass	*pGetMotorPosCmd =
		new GetMotorPosClass("GetMotorPos",
			Tango::DEV_SHORT, Tango::DEV_DOUBLE,
			"Motor nr",
			"Motor position",
			Tango::OPERATOR);
	command_list.push_back(pGetMotorPosCmd);

	//	Command ListPLC
	ListPLCClass	*pListPLCCmd =
		new ListPLCClass("ListPLC",
			Tango::DEV_SHORT, Tango::DEVVAR_STRINGARRAY,
			"PLC nr",
			"PLC code",
			Tango::OPERATOR);
	command_list.push_back(pListPLCCmd);

	/*----- PROTECTED REGION ID(PmacEthClass::command_factory_after) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::command_factory_after
}

//===================================================================
//	Dynamic attributes related methods
//===================================================================

//--------------------------------------------------------
/**
 * method : 		PmacEthClass::create_static_attribute_list
 * description : 	Create the a list of static attributes
 *
 * @param	att_list	the ceated attribute list 
 */
//--------------------------------------------------------
void PmacEthClass::create_static_attribute_list(vector<Tango::Attr *> &att_list)
{
	for (unsigned long i=0 ; i<att_list.size() ; i++)
	{
		string att_name(att_list[i]->get_name());
		transform(att_name.begin(), att_name.end(), att_name.begin(), ::tolower);
		defaultAttList.push_back(att_name);
	}

	cout2 << defaultAttList.size() << " attributes in default list" << endl;

	/*----- PROTECTED REGION ID(PmacEthClass::create_static_att_list) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::create_static_att_list
}


//--------------------------------------------------------
/**
 * method : 		PmacEthClass::erase_dynamic_attributes
 * description : 	delete the dynamic attributes if any.
 *
 * @param	devlist_ptr	the device list pointer
 * @param	list of all attributes
 */
//--------------------------------------------------------
void PmacEthClass::erase_dynamic_attributes(const Tango::DevVarStringArray *devlist_ptr, vector<Tango::Attr *> &att_list)
{
	Tango::Util *tg = Tango::Util::instance();

	for (unsigned long i=0 ; i<devlist_ptr->length() ; i++)
	{	
		Tango::DeviceImpl *dev_impl = tg->get_device_by_name(((string)(*devlist_ptr)[i]).c_str());
		PmacEth *dev = static_cast<PmacEth *> (dev_impl);
		
		vector<Tango::Attribute *> &dev_att_list = dev->get_device_attr()->get_attribute_list();
		vector<Tango::Attribute *>::iterator ite_att;
		for (ite_att=dev_att_list.begin() ; ite_att != dev_att_list.end() ; ++ite_att)
		{
			string att_name((*ite_att)->get_name_lower());
			if ((att_name == "state") || (att_name == "status"))
				continue;
			vector<string>::iterator ite_str = find(defaultAttList.begin(), defaultAttList.end(), att_name);
			if (ite_str == defaultAttList.end())
			{
				cout2 << att_name << " is a UNWANTED dynamic attribute for device " << (*devlist_ptr)[i] << endl;
				Tango::Attribute &att = dev->get_device_attr()->get_attr_by_name(att_name.c_str());
				dev->remove_attribute(att_list[att.get_attr_idx()], true, false);
				--ite_att;
			}
		}
	}
	/*----- PROTECTED REGION ID(PmacEthClass::erase_dynamic_attributes) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	PmacEthClass::erase_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : PmacEthClass::get_attr_by_name()
 *	Description : returns Tango::Attr * object found by name
 */
//--------------------------------------------------------
Tango::Attr *PmacEthClass::get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname)
{
	vector<Tango::Attr *>::iterator it;
	for (it=att_list.begin() ; it<att_list.end() ; it++)
		if ((*it)->get_name()==attname)
			return (*it);
	//	Attr does not exist
	return NULL;
}


/*----- PROTECTED REGION ID(PmacEthClass::Additional Methods) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	PmacEthClass::Additional Methods
} //	namespace
