/*----- PROTECTED REGION ID(PmacEth.h) ENABLED START -----*/
//=============================================================================
//
// file :        PmacEth.h
//
// description : Include file for the PmacEth class
//
// project :     PMAC over Ethernet
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef PmacEth_H
#define PmacEth_H

#include <tango.h>





/*----- PROTECTED REGION END -----*/	//	PmacEth.h

/**
 *  PmacEth class description:
 *    Device Server for PMAC over Ethernet
 */

namespace PmacEth_ns
{
/*----- PROTECTED REGION ID(PmacEth::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	PmacEth::Additional Class Declarations

class PmacEth : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(PmacEth::Data Members) ENABLED START -----*/

//	Add your own data members
public:



/*----- PROTECTED REGION END -----*/	//	PmacEth::Data Members

//	Device property data members
public:
	//	IP_address:	IP address of PMAC controller card.
	string	iP_address;

//	Attribute data members
public:
	Tango::DevLong	*attr_Position_read;
	Tango::DevLong	*attr_Velocity_read;
	Tango::DevLong	*attr_FollowErr_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PmacEth(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	PmacEth(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	PmacEth(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */	
	~PmacEth() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : PmacEth::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Position related methods
 *	Description: Current position of selected motor in encoder counts
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Position(Tango::Attribute &attr);
	virtual bool is_Position_allowed(Tango::AttReqType type);
/**
 *	Attribute Velocity related methods
 *	Description: Velocity of selected motor in counts/second
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_Velocity(Tango::Attribute &attr);
	virtual bool is_Velocity_allowed(Tango::AttReqType type);
/**
 *	Attribute FollowErr related methods
 *	Description: Following error of motor in encoder counts
 *
 *	Data type:	Tango::DevLong
 *	Attr type:	Scalar
 */
	virtual void read_FollowErr(Tango::Attribute &attr);
	virtual bool is_FollowErr_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : PmacEth::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();



//	Command related methods
public:
	/**
	 *	Command OpenConnection related method
	 *	Description: Open TCP connection with the PMAC controller card.
	 *               The device property IP_address must contain the actual PMAC IP address.
	 *
	 */
	virtual void open_connection();
	virtual bool is_OpenConnection_allowed(const CORBA::Any &any);
	/**
	 *	Command CloseConnection related method
	 *	Description: Close current TCP connection between PC & PMAC.
	 *
	 */
	virtual void close_connection();
	virtual bool is_CloseConnection_allowed(const CORBA::Any &any);
	/**
	 *	Command AboutPmac related method
	 *	Description: Display information about PMAC controller card.
	 *
	 *	@returns 
	 */
	virtual Tango::DevString about_pmac();
	virtual bool is_AboutPmac_allowed(const CORBA::Any &any);
	/**
	 *	Command FirmwareInfo related method
	 *	Description: Display information about PMAC firmware in  use.
	 *
	 *	@returns 
	 */
	virtual Tango::DevString firmware_info();
	virtual bool is_FirmwareInfo_allowed(const CORBA::Any &any);
	/**
	 *	Command GetIPaddr related method
	 *	Description: Get current/set PMAC IP address from controller card.
	 *
	 *	@returns PMAC IP address read from controller card.
	 */
	virtual Tango::DevString get_ipaddr();
	virtual bool is_GetIPaddr_allowed(const CORBA::Any &any);
	/**
	 *	Command SetIPaddr related method
	 *	Description: dotted decimal form.
	 *
	 *	@param argin PMAC IP address to set; dotted decimal form.
	 */
	virtual void set_ipaddr(Tango::DevString argin);
	virtual bool is_SetIPaddr_allowed(const CORBA::Any &any);
	/**
	 *	Command JogPlus related method
	 *	Description: Jog motor indefinitely in the positive direction.
	 *
	 *	@param argin Nr of motor to jog plus
	 */
	virtual void jog_plus(const Tango::DevVarShortArray *argin);
	virtual bool is_JogPlus_allowed(const CORBA::Any &any);
	/**
	 *	Command JogMinus related method
	 *	Description: Jog motor indefinitely in the negative direction.
	 *
	 *	@param argin Nr of motor to jog minus
	 */
	virtual void jog_minus(const Tango::DevVarShortArray *argin);
	virtual bool is_JogMinus_allowed(const CORBA::Any &any);
	/**
	 *	Command JogStop related method
	 *	Description: Stop jogging motor.
	 *               Restore position control if motor was killed.
	 *
	 *	@param argin Nr of motor to jog stop
	 */
	virtual void jog_stop(const Tango::DevVarShortArray *argin);
	virtual bool is_JogStop_allowed(const CORBA::Any &any);
	/**
	 *	Command JogToPos related method
	 *	Description: Jog motor to specified position.
	 *
	 *	@param argin Position motor should move to, in encoder counts.
	 */
	virtual void jog_to_pos(const Tango::DevVarDoubleArray *argin);
	virtual bool is_JogToPos_allowed(const CORBA::Any &any);
	/**
	 *	Command JogDistFromPos related method
	 *	Description: Jog motor specified distance from the current actual position.
	 *
	 *	@param argin Distance from current actual position, in encoder counts.
	 */
	virtual void jog_dist_from_pos(Tango::DevLong argin);
	virtual bool is_JogDistFromPos_allowed(const CORBA::Any &any);
	/**
	 *	Command JogDistFromCmdPos related method
	 *	Description: Jog motor specified distance from the current commanded position.
	 *
	 *	@param argin Distance from current commanded position, in encoder counts.
	 */
	virtual void jog_dist_from_cmd_pos(Tango::DevLong argin);
	virtual bool is_JogDistFromCmdPos_allowed(const CORBA::Any &any);
	/**
	 *	Command GetFeedrateOverride related method
	 *	Description: Report current feedrate override value.
	 *
	 *	@returns Feedrate override in percents.
	 */
	virtual Tango::DevDouble get_feedrate_override();
	virtual bool is_GetFeedrateOverride_allowed(const CORBA::Any &any);
	/**
	 *	Command SetFeedrateOverride related method
	 *	Description: Set feedrate override (percentage).
	 *
	 *	@param argin Feedrate override in percents.
	 */
	virtual void set_feedrate_override(Tango::DevFloat argin);
	virtual bool is_SetFeedrateOverride_allowed(const CORBA::Any &any);
	/**
	 *	Command ResetMotor related method
	 *	Description: Reset feedback device(s) and phasing.
	 *
	 *	@param argin Nr of motor to reset
	 */
	virtual void reset_motor(const Tango::DevVarShortArray *argin);
	virtual bool is_ResetMotor_allowed(const CORBA::Any &any);
	/**
	 *	Command HomeMotor related method
	 *	Description: Perform homing routine for current motor.
	 *
	 *	@param argin Nr of motor to home
	 */
	virtual void home_motor(const Tango::DevVarShortArray *argin);
	virtual bool is_HomeMotor_allowed(const CORBA::Any &any);
	/**
	 *	Command HomeZeroMotor related method
	 *	Description: Perform zero-move routine for current motor.
	 *
	 *	@param argin Nr of motor to zero home
	 */
	virtual void home_zero_motor(const Tango::DevVarShortArray *argin);
	virtual bool is_HomeZeroMotor_allowed(const CORBA::Any &any);
	/**
	 *	Command KillMotor related method
	 *	Description: Kill output for current motor.
	 *
	 *	@param argin Nr of motor to kill
	 */
	virtual void kill_motor(const Tango::DevVarShortArray *argin);
	virtual bool is_KillMotor_allowed(const CORBA::Any &any);
	/**
	 *	Command ClearAmplifFault related method
	 *	Description: Clear Geo amplifier fault display. (Geo PMAC only)
	 *
	 */
	virtual void clear_amplif_fault();
	virtual bool is_ClearAmplifFault_allowed(const CORBA::Any &any);
	/**
	 *	Command GlobalReset related method
	 *	Description: Global reset, including all motors & coordinate systems.
	 *
	 */
	virtual void global_reset();
	virtual bool is_GlobalReset_allowed(const CORBA::Any &any);
	/**
	 *	Command GlobalResetReinit related method
	 *	Description: Global reset & re-initialize controller card.
	 *
	 */
	virtual void global_reset_reinit();
	virtual bool is_GlobalResetReinit_allowed(const CORBA::Any &any);
	/**
	 *	Command SendCtrlChar related method
	 *	Description: Send a control character to the PMAC card & get its response, if any.
	 *
	 *	@param argin Control character to send:\n A - abort all motion programs & moves\n D - disable all PLC & PLCC programs\n K - kill outputs for all motors\n L - close rotary program buffer\n O - do feed hold on all coordinate systems\n Q - quit all programs at end of calculated moves\n R - run working programs in all coordinate systems\n S - step working programs in all coordinate systems\n U - open rotary program buffer\n B - report all motor status words to host\n C - report all coordinate system status words to host\n F - report all motor following errors (unscaled)\n G - report global status words in binary form\n P - report all motor positions (unscaled)\n V - report all motor velocities (unscaled)
	 *	@returns Command response from controller card, if any.
	 */
	virtual Tango::DevString send_ctrl_char(Tango::DevString argin);
	virtual bool is_SendCtrlChar_allowed(const CORBA::Any &any);
	/**
	 *	Command GlobalStatus related method
	 *	Description: Report global status.
	 *
	 *	@returns Global status words in hex ASCII form.
	 */
	virtual Tango::DevString global_status();
	virtual bool is_GlobalStatus_allowed(const CORBA::Any &any);
	/**
	 *	Command CoordSysStatus related method
	 *	Description: Report current coordinate system status.
	 *
	 *	@returns Coordinate system status in hex ASCII form.
	 */
	virtual Tango::DevString coord_sys_status();
	virtual bool is_CoordSysStatus_allowed(const CORBA::Any &any);
	/**
	 *	Command GetIVariable related method
	 *	Description: Report the value of the I variable indicated in Command Argin.
	 *
	 *	@param argin I variable number
	 *	@returns I variable value
	 */
	virtual Tango::DevDouble get_ivariable(Tango::DevULong argin);
	virtual bool is_GetIVariable_allowed(const CORBA::Any &any);
	/**
	 *	Command SetIVariable related method
	 *	Description: Set the I variable indicated in the first element of Command Argin to
	 *               the value specified by the second element of Command Argin.
	 *
	 *	@param argin I variable number
	 */
	virtual void set_ivariable(const Tango::DevVarDoubleArray *argin);
	virtual bool is_SetIVariable_allowed(const CORBA::Any &any);
	/**
	 *	Command GetMVariable related method
	 *	Description: Report the value of the M variable indicated in Command Argin.
	 *
	 *	@param argin M variable number
	 *	@returns M variable value
	 */
	virtual Tango::DevDouble get_mvariable(Tango::DevULong argin);
	virtual bool is_GetMVariable_allowed(const CORBA::Any &any);
	/**
	 *	Command SetMVariable related method
	 *	Description: Set the M variable indicated in the first element of Command Argin to
	 *               the value specified by the second element of Command Argin.
	 *
	 *	@param argin M variable number
	 */
	virtual void set_mvariable(const Tango::DevVarDoubleArray *argin);
	virtual bool is_SetMVariable_allowed(const CORBA::Any &any);
	/**
	 *	Command GetPVariable related method
	 *	Description: Report the value of the P variable indicated in Command Argin.
	 *
	 *	@param argin P variable number
	 *	@returns P variable value
	 */
	virtual Tango::DevDouble get_pvariable(Tango::DevULong argin);
	virtual bool is_GetPVariable_allowed(const CORBA::Any &any);
	/**
	 *	Command GetPVariableRange related method
	 *	Description: 
	 *
	 *	@param argin P variables range: begin and end
	 *	@returns P variables values
	 */
	virtual Tango::DevVarDoubleArray *get_pvariable_range(const Tango::DevVarULongArray *argin);
	virtual bool is_GetPVariableRange_allowed(const CORBA::Any &any);
	/**
	 *	Command SetPVariable related method
	 *	Description: Set the P variable indicated in the first element of Command Argin to
	 *               the value specified by the second element of Command Argin.
	 *
	 *	@param argin P variable number
	 */
	virtual void set_pvariable(const Tango::DevVarDoubleArray *argin);
	virtual bool is_SetPVariable_allowed(const CORBA::Any &any);
	/**
	 *	Command SaveIVars related method
	 *	Description: Save I variables into non-volatile memory.
	 *
	 */
	virtual void save_ivars();
	virtual bool is_SaveIVars_allowed(const CORBA::Any &any);
	/**
	 *	Command DownloadFile related method
	 *	Description: Download file to PMAC card.
	 *
	 *	@param argin Name of the file to download to PMAC.
	 */
	virtual void download_file(Tango::DevString argin);
	virtual bool is_DownloadFile_allowed(const CORBA::Any &any);
	/**
	 *	Command UploadVars related method
	 *	Description: Upload variables from PMAC.
	 *
	 *	@param argin Name of the file to save variables to.
	 */
	virtual void upload_vars(Tango::DevString argin);
	virtual bool is_UploadVars_allowed(const CORBA::Any &any);
	/**
	 *	Command UploadProg related method
	 *	Description: Not implemented yet.
	 *
	 *	@param argin Name of the file to upload program to.
	 */
	virtual void upload_prog(Tango::DevString argin);
	virtual bool is_UploadProg_allowed(const CORBA::Any &any);
	/**
	 *	Command GetMotorNo related method
	 *	Description: Get current motor number.
	 *
	 *	@returns Current motor number.
	 */
	virtual Tango::DevShort get_motor_no();
	virtual bool is_GetMotorNo_allowed(const CORBA::Any &any);
	/**
	 *	Command SetMotorNo related method
	 *	Description: Set current motor number.
	 *
	 *	@param argin Motor number.
	 */
	virtual void set_motor_no(Tango::DevShort argin);
	virtual bool is_SetMotorNo_allowed(const CORBA::Any &any);
	/**
	 *	Command DefineCoordSys related method
	 *	Description: Define a coordinate system for the current motor axis, specifying scale factor & offset.
	 *
	 *	@param argin Scale factor, Offset
	 */
	virtual void define_coord_sys(const Tango::DevVarDoubleArray *argin);
	virtual bool is_DefineCoordSys_allowed(const CORBA::Any &any);
	/**
	 *	Command GetCoordSys related method
	 *	Description: Report axis definition of current motor in current coordinate system.
	 *
	 *	@returns 
	 */
	virtual Tango::DevString get_coord_sys();
	virtual bool is_GetCoordSys_allowed(const CORBA::Any &any);
	/**
	 *	Command OnlineCmd related method
	 *	Description: Executes an online command on Pmac.
	 *
	 *	@param argin Cmd String
	 *	@returns Cmd Output
	 */
	virtual Tango::DevString online_cmd(Tango::DevString argin);
	virtual bool is_OnlineCmd_allowed(const CORBA::Any &any);
	/**
	 *	Command EnablePLC related method
	 *	Description: Enables PLC on Pmac.
	 *
	 *	@param argin PLC program nr
	 */
	virtual void enable_plc(Tango::DevShort argin);
	virtual bool is_EnablePLC_allowed(const CORBA::Any &any);
	/**
	 *	Command DisablePLC related method
	 *	Description: Disables PLC on Pmac.
	 *
	 *	@param argin PLC prog nr
	 */
	virtual void disable_plc(Tango::DevShort argin);
	virtual bool is_DisablePLC_allowed(const CORBA::Any &any);
	/**
	 *	Command RunMotionProg related method
	 *	Description: Run motion program on Pmac.
	 *
	 *	@param argin Motion program nr
	 */
	virtual void run_motion_prog(Tango::DevShort argin);
	virtual bool is_RunMotionProg_allowed(const CORBA::Any &any);
	/**
	 *	Command GetMotorPos related method
	 *	Description: Get motor position.
	 *
	 *	@param argin Motor nr
	 *	@returns Motor position
	 */
	virtual Tango::DevDouble get_motor_pos(Tango::DevShort argin);
	virtual bool is_GetMotorPos_allowed(const CORBA::Any &any);
	/**
	 *	Command ListPLC related method
	 *	Description: 
	 *
	 *	@param argin PLC nr
	 *	@returns PLC code
	 */
	virtual Tango::DevVarStringArray *list_plc(Tango::DevShort argin);
	virtual bool is_ListPLC_allowed(const CORBA::Any &any);


/*----- PROTECTED REGION ID(PmacEth::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
static const char ctrl_char[26];


protected :	
  int sockfd;

/*----- PROTECTED REGION END -----*/	//	PmacEth::Additional Method prototypes
};

/*----- PROTECTED REGION ID(PmacEth::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	PmacEth::Additional Classes Definitions

}	//	End of namespace

#endif   //	PmacEth_H
